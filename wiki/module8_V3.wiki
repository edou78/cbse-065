|| *Content* || *Utility Software* Compression tools, Anti Virus, SPAM Filters, File Management tools, Archiving, Backups, Time snapshots of disk and Disk Management tools ||
|| *Team* || J T D'souza  ||
|| *Discussion Page* || [http://groups.google.com/group/cbse065/browse_thread/thread/afae959fd217d881] ||
|| *Changes* || http://code.google.com/p/cbse-065/source/diff?path=/wiki/module8.wiki&format=side&r=-1 || 
|| *Old Version List* || http://code.google.com/p/cbse-065/source/list?path=/wiki/module8.wiki ||

<hr/>

<wiki:toc max_depth="5" />

= Introduction =

Standard utilities available on a GNU/Linux OS


= Details =

This module provides an introduction to the standard utilities available on a GNU/Linux OS installation. We shall cover the features of each utility and the command line syntax for doing typical administrative tasks.

We shall be using debian distribution named Lenny. However what we learn here will be applicable on almost any GNU/Linux distribution like Fedora, Suse, Mandriva, Ubuntu, Slacware etc. Embedded distributions like DSL, MontaVista, Emdebian etc, may not have all the utilities and even included utilities will have several features missing. 

Utilities are small command line programs used to do mundane installation, maintenance, configuration and testing tasks.
These programs can be divided into a few broad categories
 #1 Shell
 #2 File, Shell and Text utils
 #3 Disk utils
 #4 Network utils
 #5 Search utils
 #6 Install utils
 #7 Editors
 #8 Others

Before we proceed any further we will take a look at that most profound creation of all - man. No it is not man from hu-man or wo-man, but man from manual and will beat super-man. It is your mana from heaven and will save you from disaster always. Well at least from disaster on the computer, where quite often even superman like powers fail.
man is a shortform for manual and gives you a brief description of the programme and it's usage syntax for the innumerable options available with every utility.
The syntax for man is man `<command>`
Thus typing 
man man 
will, in a bout of self glorification, tell you all about itself and give you the details of what the man command does and it's usage options. Although man itself has several options just typing man `<command>` is sufficient for most purposes.

So before you go and type rm and wipe your disk clean, please type man rm to understand the implications of your action. Well even if you are not going to wipe your disk clean do use man - especially when this textbook gets boring.

The usage syntax for every utility listed below is available with man. Infact this module is a printed version of each utility's manpage with occasional changes.

==  Fileutils, shellutils and textutils ==

These utilities are available in the coreutils package in Debain  / Redhat and their derivatives.  Previously a set of three packages,  GNU fileutils, shellutils and textutils, implemented the core set of GNU utilities.

on apt based distributions like debian, Ubuntu, Knoppix etc 
apt-get install coreutils 
will install coreutils

On rpm based distros like Redhat, Fedora, etc
rpm -i coreutils
will install coreutils

And by the way, you just learn't how to install a package on debian and derivative distros and Redhat and derivative distros in the above two paras.
 
In the previous section on shells, you have seen how output from one command is piped to a second (or third or more) command. We can pipe the output of a utility to another one to ease tasks or realise more complex tasks.
For example ls gives you a long list if you have many files and the output scrolls off the top of your screen. So you use ls | less which will give you a scrollable output.
Or ls -al | grep ^d which will only list directories.

For complex repetitive tasks one can write a bash script.

=== basename ===
Strip directory and suffix from filenames
Examples

 basename /usr/bin/sort
              Output "sort".

 basename include/stdio.h .h
              Output "stdio".

=== cat ===
Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
             display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES

 cat /usr/share/doc/manpages/README.Debian 

 will give you details of the debian GNU/Linux manual pages

=== chgrp === 
Change  the group of each FILE to GROUP.  With --reference, change the group of each FILE to that of RFILE.
       -c, --changes
              like verbose but report only when a change is made

       --dereference
              affect the referent of each symbolic link (this is the default),  rather  than  the  symbolic link itself

       -h, --no-dereference
              affect  each  symbolic  link  instead of any referenced file (useful only on systems that can change the ownership of a symlink)

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
              suppress most error messages

       --reference=RFILE
              use RFILE's group rather than specifying a GROUP value

       -R, --recursive
              operate on files and directories recursively

       -v, --verbose
              output a diagnostic for every file processed

       The following options modify how a hierarchy is traversed when the -R option is also specified. If more than one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       chgrp staff /u
              Change the group of /u to "staff".

       chgrp -hR staff /u
              Change the group of /u and subfiles to "staff".

=== chmod ===

This manual page documents the GNU version of chmod.  chmod changes the file mode bits of each given file according to mode, which can be either a symbolic representation of  changes to make, or an octal number representing the bit pattern for the new mode bits.

The  format  of a symbolic mode is [ugoa...][[+-=][perms...]...], where perms is either zero or more letters from the set rwxXst, or a single letter from the set ugo.  Multiple symbolic  modes  can  be given, separated by commas.

A combination of the letters ugoa controls which users' access to the file will be changed: the user who owns it (u), other users in the file's group (g), other users not in the file's  group  (o),  or all  users (a).  If none of these are given, the effect is as if a were given, but bits that are set in the umask are not affected.

The operator + causes the selected file mode bits to be added to the existing file mode bits of each file;  -  causes them to be removed; and = causes them to be added and causes unmentioned bits to be removed except that a directory's unmentioned set user and group ID bits are not affected.

The letters rwxXst select file mode bits for the affected users: read (r), write  (w),  execute  (or search for directories) (x), execute/search only if the file is a directory or already has execute permission for some user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead of one or more of these letters, you can specify exactly one of the letters ugo: the permissions granted to the user who owns the file (u), the  permissions  granted  to  other users who are members of the file's group (g), and the permissions granted to users that are in neither of the two preceding categories (o).

A numeric mode is from one to four octal digits (0-7), derived by adding up the bits with values  4, 2,  and 1.  Omitted digits are assumed to be leading zeros.  The first digit selects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes.  The second digit selects permissions  for the user who owns the file: read (4), write (2), and execute (1); the third selects permissions for other users in the file's group, with the same values;  and  the  fourth  for  other users not in the file's group, with the same values.

chmod  never  changes  the  permissions of symbolic links; the chmod system call cannot change their permissions. This is not a problem since the permissions of symbolic links are never used. However, for each symbolic link listed on the command line, chmod changes the permissions of the pointed-to file. In contrast, chmod ignores symbolic links encountered during  recursive  directory traversals.

*SETUID AND SETGID BITS*
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effective group ID or one of the user's supplementary group IDs, unless the user has appropriate privileges. Additional restrictions may cause the set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.  This behavior depends on the policy and functionality of the underlying  chmod system call.  When in doubt, check the underlying system behavior. 
       chmod preserves a directory's set-user-ID and set-group-ID bits unless you explicitly specify otherwise. You can set or clear the bits with symbolic modes like u+s and g-s, and you can set (but  not clear) the bits with a numeric mode.

*RESTRICTED DELETION FLAG OR STICKY BIT*
       The restricted deletion flag or sticky bit is a single bit, whose interpretation depends on the file
       type.  For directories, it prevents unprivileged users from removing  or  renaming  a  file  in  the
       directory unless they own the file or the directory; this is called the restricted deletion flag for
       the directory, and is commonly found on world-writable directories like /tmp.  For regular files  on
       some  older  systems, the bit saves the program's text image on the swap device so it will load more
       quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.

       -c, --changes
              like verbose but report only when a change is made

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
       -v, --verbose
              output a diagnostic for every file processed

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form `[ugoa]*([-+=]([rwxXst]*|[ugo]))+`.

=== chown ===
This  manual page documents the GNU version of chown.  chown changes the user and/or group ownership of each given file. If only an owner (a user name or numeric user ID) is given, that user is made the  owner of each given file, and the files' group is not changed.  If the owner is followed by a colon and a group name (or numeric group ID), with no spaces between them, the  group ownership of the files is changed as well. If a colon but no group name follows the user name, that user is made the owner of the files and the group of the files is changed to that user's login group. If the colon and group are given, but the owner is omitted, only the group of the files is changed; in this   case, chown performs the same function as chgrp.  If only a colon is given, or if the entire operand is empty, neither the owner nor the group is changed.

OPTIONS
       Change  the  owner  and/or  group  of each FILE to OWNER and/or GROUP.  With --reference, change the
       owner and group of each FILE to those of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       --dereference
              affect the referent of each symbolic link (this is the default),  rather  than  the  symbolic
              link itself

       -h, --no-dereference
              affect  each  symbolic  link  instead of any referenced file (useful only on systems that can
              change the ownership of a symlink)

       --from=CURRENT_OWNER:CURRENT_GROUP
              change the owner and/or group of each file only if its current owner and/or group match those
              specified here.  Either may be omitted, in which case a match is not required for the omitted
              attribute.

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
              suppress most error messages

       --reference=RFILE
              use RFILE's owner and group rather than specifying OWNER:GROUP values

       -R, --recursive
              operate on files and directories recursively

       -v, --verbose
              output a diagnostic for every file processed

       The following options modify how a hierarchy is traversed when the -R option is also specified.   If
       more than one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

       Owner is unchanged if missing.  Group is unchanged if missing, but changed to login group if implied by a : following a symbolic OWNER.  OWNER and GROUP may be numeric as well as symbolic.

EXAMPLES
       chown root /u
              Change the owner of /u to "root".

       chown root:staff /u
              Likewise, but also change its group to "staff".

       chown -hR root /u
              Change the owner of /u and subfiles to "root".


=== chroot ===
=== cksum ===
=== comm ===
=== cp ===
=== csplit ===
=== cut ===
=== date ===
=== dd ===
=== df ===
=== dir ===
=== dircolors ===
=== dirname ===
=== du ===
=== echo ===
=== env ===
=== expand ===
=== expr ===
=== factor ===
=== false ===
=== fmt ===
=== fold ===
=== groups ===
=== head ===
=== hostid ===
=== id ===
=== install ===
=== join ===
=== link ===
=== ln ===
=== logname ===
=== ls ===
=== md5sum ===
=== mkdir ===
=== mkfifo ===
=== mknod ===
=== mv ===
=== nice ===
=== nl ===
=== nohup ===
=== od ===
=== paste ===
=== pathchk ===
=== pinky ===
=== pr ===
=== printenv ===
=== printf ===
=== ptx ===
=== pwd ===
=== readlink ===
=== rm ===
=== rmdir ===
=== sha1sum ===
=== seq ===
=== shred ===
=== sleep ===
=== sort ===
=== split ===
=== stat ===
=== stty ===
=== sum ===
=== sync ===
=== tac ===
=== tail ===
=== tee ===
=== test ===
=== touch ===
=== tr ===
=== true ===
=== tsort ===
=== tty ===
=== uname ===
=== unexpand ===
=== uniq ===
=== unlink ===
=== users ===
=== vdir ===
=== wc ===
=== who ===
=== whoami ===
=== yes ===

== Disk Utils ==
 * gpart
 * e2fsprogs 
 * xfsprogs
 * jfsutils
 * reiser4progs
 * dosfstools
 * ntfsprogs
 * hfsprogs 
 * mtd-utils, genromfs. ocfs2-tools, nilfs2-tools 

== Compression tools ==
=== Anti Virus=== 
=== SPAM Filters ===
=== File Management tools ===
=== Archiving===
=== Backups===
=== Time snapshots of disk===
=== Disk Management tools ===