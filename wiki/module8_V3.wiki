|| *Content* || *Utility Software* Compression tools, Anti Virus, SPAM Filters, File Management tools, Archiving, Backups, Time snapshots of disk and Disk Management tools ||
|| *Team* || J T D'souza  ||
|| *Discussion Page* || [http://groups.google.com/group/cbse065/browse_thread/thread/afae959fd217d881] ||
|| *Changes* || http://code.google.com/p/cbse-065/source/diff?path=/wiki/module8.wiki&format=side&r=-1 || 
|| *Old Version List* || http://code.google.com/p/cbse-065/source/list?path=/wiki/module8.wiki ||

<hr/>

<wiki:toc max_depth="5" />

= Introduction =

Standard utilities available on a GNU/Linux OS


= Details =

This module provides an introduction to the standard utilities available on a GNU/Linux OS installation. We shall cover the features of each utility and the command line syntax for doing typical administrative tasks.

We shall be using debian distribution named Lenny. However what we learn here will be applicable on almost any GNU/Linux distribution like Fedora, Suse, Mandriva, Ubuntu, Slacware etc. Embedded distributions like DSL, MontaVista, Emdebian etc, may not have all the utilities and even included utilities will have several features missing. 

Utilities are small command line programs used to do mundane installation, maintenance, configuration and testing tasks.
These programs can be divided into a few broad categories
 #1 Shell
 #2 File, Shell and Text utils
 #3 Disk utils
 #4 Network utils
 #5 Search utils
 #6 Install utils
 #7 Editors
 #8 Others

Before we proceed any further we will take a look at that most profound creation of all - man. No it is not man from hu-man or wo-man, but man from manual and will beat super-man. It is your mana from heaven and will save you from disaster always. Well at least from disaster on the computer, where quite often even superman like powers fail.
man is a shortform for manual and gives you a brief description of the programme and it's usage syntax for the innumerable options available with every utility.
The syntax for man is man `<command>`
Thus typing 
man man 
will, in a bout of self glorification, tell you all about itself and give you the details of what the man command does and it's usage options. Although man itself has several options just typing man `<command>` is sufficient for most purposes.

So before you go and type rm and wipe your disk clean, please type man rm to understand the implications of your action. Well even if you are not going to wipe your disk clean do use man - especially when this textbook gets boring.

The usage syntax for every utility listed below is available with man. Infact this module is a printed version of each utility's manpage with occasional changes.

==  Fileutils, shellutils and textutils ==

These utilities are available in the coreutils package in Debain  / Redhat and their derivatives.  Previously a set of three packages,  GNU fileutils, shellutils and textutils, implemented the core set of GNU utilities.

on apt based distributions like debian, Ubuntu, Knoppix etc 
apt-get install coreutils 
will install coreutils

On rpm based distros like Redhat, Fedora, etc
rpm -i coreutils
will install coreutils

And by the way, you just learn't how to install a package on debian and derivative distros and Redhat and derivative distros in the above two paras.
 
In the previous section on shells, you have seen how output from one command is piped to a second (or third or more) command. We can pipe the output of a utility to another one to ease tasks or realise more complex tasks.
For example ls gives you a long list if you have many files and the output scrolls off the top of your screen. So you use ls | less which will give you a scrollable output.
Or ls -al | grep ^d which will only list directories.

For complex repetitive tasks one can write a bash script.

=== basename ===
Strip directory and suffix from filenames
Examples

 basename /usr/bin/sort
              Output "sort".

 basename include/stdio.h .h
              Output "stdio".

=== cat ===
Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
             display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES

 cat /usr/share/doc/manpages/README.Debian 

 will give you details of the debian GNU/Linux manual pages

=== chgrp === 
Change  the group of each FILE to GROUP.  With --reference, change the group of each FILE to that of RFILE.
       -c, --changes
              like verbose but report only when a change is made

       --dereference
              affect the referent of each symbolic link (this is the default),  rather  than  the  symbolic link itself

       -h, --no-dereference
              affect  each  symbolic  link  instead of any referenced file (useful only on systems that can change the ownership of a symlink)

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
              suppress most error messages

       --reference=RFILE
              use RFILE's group rather than specifying a GROUP value

       -R, --recursive
              operate on files and directories recursively

       -v, --verbose
              output a diagnostic for every file processed

       The following options modify how a hierarchy is traversed when the -R option is also specified. If more than one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       chgrp staff /u
              Change the group of /u to "staff".

       chgrp -hR staff /u
              Change the group of /u and subfiles to "staff".

=== chmod ===

This manual page documents the GNU version of chmod.  chmod changes the file mode bits of each given file according to mode, which can be either a symbolic representation of  changes to make, or an octal number representing the bit pattern for the new mode bits.

The  format  of a symbolic mode is [ugoa...][[+-=][perms...]...], where perms is either zero or more letters from the set rwxXst, or a single letter from the set ugo.  Multiple symbolic  modes  can  be given, separated by commas.

A combination of the letters ugoa controls which users' access to the file will be changed: the user who owns it (u), other users in the file's group (g), other users not in the file's  group  (o),  or all  users (a).  If none of these are given, the effect is as if a were given, but bits that are set in the umask are not affected.

The operator + causes the selected file mode bits to be added to the existing file mode bits of each file;  -  causes them to be removed; and = causes them to be added and causes unmentioned bits to be removed except that a directory's unmentioned set user and group ID bits are not affected.

The letters rwxXst select file mode bits for the affected users: read (r), write  (w),  execute  (or search for directories) (x), execute/search only if the file is a directory or already has execute permission for some user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead of one or more of these letters, you can specify exactly one of the letters ugo: the permissions granted to the user who owns the file (u), the  permissions  granted  to  other users who are members of the file's group (g), and the permissions granted to users that are in neither of the two preceding categories (o).

A numeric mode is from one to four octal digits (0-7), derived by adding up the bits with values  4, 2,  and 1.  Omitted digits are assumed to be leading zeros.  The first digit selects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes.  The second digit selects permissions  for the user who owns the file: read (4), write (2), and execute (1); the third selects permissions for other users in the file's group, with the same values;  and  the  fourth  for  other users not in the file's group, with the same values.

chmod  never  changes  the  permissions of symbolic links; the chmod system call cannot change their permissions. This is not a problem since the permissions of symbolic links are never used. However, for each symbolic link listed on the command line, chmod changes the permissions of the pointed-to file. In contrast, chmod ignores symbolic links encountered during  recursive  directory traversals.

*SETUID AND SETGID BITS*
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effective group ID or one of the user's supplementary group IDs, unless the user has appropriate privileges. Additional restrictions may cause the set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.  This behavior depends on the policy and functionality of the underlying  chmod system call.  When in doubt, check the underlying system behavior. 
       chmod preserves a directory's set-user-ID and set-group-ID bits unless you explicitly specify otherwise. You can set or clear the bits with symbolic modes like u+s and g-s, and you can set (but  not clear) the bits with a numeric mode.

*RESTRICTED DELETION FLAG OR STICKY BIT*
       The restricted deletion flag or sticky bit is a single bit, whose interpretation depends on the file
       type.  For directories, it prevents unprivileged users from removing  or  renaming  a  file  in  the
       directory unless they own the file or the directory; this is called the restricted deletion flag for
       the directory, and is commonly found on world-writable directories like /tmp.  For regular files  on
       some  older  systems, the bit saves the program's text image on the swap device so it will load more
       quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.

       -c, --changes
              like verbose but report only when a change is made

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
       -v, --verbose
              output a diagnostic for every file processed

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form `[ugoa]*([-+=]([rwxXst]*|[ugo]))+`.

=== chown ===
This  manual page documents the GNU version of chown.  chown changes the user and/or group ownership of each given file. If only an owner (a user name or numeric user ID) is given, that user is made the  owner of each given file, and the files' group is not changed.  If the owner is followed by a colon and a group name (or numeric group ID), with no spaces between them, the  group ownership of the files is changed as well. If a colon but no group name follows the user name, that user is made the owner of the files and the group of the files is changed to that user's login group. If the colon and group are given, but the owner is omitted, only the group of the files is changed; in this   case, chown performs the same function as chgrp.  If only a colon is given, or if the entire operand is empty, neither the owner nor the group is changed.

OPTIONS
       Change  the  owner  and/or  group  of each FILE to OWNER and/or GROUP.  With --reference, change the
       owner and group of each FILE to those of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       --dereference
              affect the referent of each symbolic link (this is the default),  rather  than  the  symbolic
              link itself

       -h, --no-dereference
              affect  each  symbolic  link  instead of any referenced file (useful only on systems that can
              change the ownership of a symlink)

       --from=CURRENT_OWNER:CURRENT_GROUP
              change the owner and/or group of each file only if its current owner and/or group match those
              specified here.  Either may be omitted, in which case a match is not required for the omitted
              attribute.

       --no-preserve-root
              do not treat / specially (the default)

       --preserve-root
              fail to operate recursively on /

       -f, --silent, --quiet
              suppress most error messages

       --reference=RFILE
              use RFILE's owner and group rather than specifying OWNER:GROUP values

       -R, --recursive
              operate on files and directories recursively

       -v, --verbose
              output a diagnostic for every file processed

       The following options modify how a hierarchy is traversed when the -R option is also specified.   If
       more than one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

       Owner is unchanged if missing.  Group is unchanged if missing, but changed to login group if implied by a : following a symbolic OWNER.  OWNER and GROUP may be numeric as well as symbolic.

EXAMPLES
       chown root /u
              Change the owner of /u to "root".

       chown root:staff /u
              Likewise, but also change its group to "staff".

       chown -hR root /u
              Change the owner of /u and subfiles to "root".


=== chroot ===
       Run COMMAND with root directory set to NEWROOT.

       --help display this help and exit

       --version
              output version information and exit

       If no command is given, run `${SHELL} -i` (default: /bin/sh).

=== cksum ===
      Print CRC checksum and byte counts of each FILE.

       --help display this help and exit

       --version
              output version information and exit
EXAMPLES
       cksum /bin/ls
       3265941495 92312 /bin/ls
       displays the crc checksum 3265941495 and byte count 92312 of /bin/ls
   
=== comm ===
       Compare sorted files FILE1 and FILE2 line by line.

       With no options, produce three-column output.  Column one contains lines unique to FILE1, column two
       contains lines unique to FILE2, and column three contains lines common to both files.

       -1     suppress lines unique to FILE1

       -2     suppress lines unique to FILE2

       -3     suppress lines that appear in both files

       --help display this help and exit

       --version
        output version information and exit


=== cp ===
Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dpR

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if an existing destination file cannot be opened, remove it and try again

       -i, --interactive
              prompt before overwrite

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve  the  specified  attributes  (default: mode,ownership,timestamps), if possible additional attributes: context, links, all

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --remove-destination
              remove each existing destination file before attempting to open it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is newer than the destination file  or  when  the  destination
              file is missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is
       made sparse as well.  That is the behavior selected by --sparse=auto.   Specify  --sparse=always  to
       create  a  sparse  DEST file whenever the SOURCE file contains a long enough sequence of zero bytes.
       Use --sparse=never to inhibit creation of sparse files.

       The backup suffix is ~, unless set with --suffix or  SIMPLE_BACKUP_SUFFIX.   The  version  control
       method  may be selected via the --backup option or through the VERSION_CONTROL environment variable.
       Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As a special case, cp makes a backup of SOURCE when the force  and  backup  options  are  given  and
       SOURCE and DEST are the same name for an existing, regular file.

EXAMPLES
       cp ~/somefile /bkp/
          copies somefile from the users home directory to the bkp directory
       cp -rvp ~/ /bkp/
          copy recursively everything from the users home dirctory to the bkp directory, displaying what is going on, and preserving permissions.

=== csplit ===
 Output  pieces  of FILE separated by PATTERN(s) to files "xx00", "xx01", ..., and output byte counts
       of each piece to standard output.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --suffix-format=FORMAT
              use sprintf FORMAT instead of %02d

       -f, --prefix=PREFIX
              use PREFIX instead of 'xx'

       -k, --keep-files
              do not remove output files on errors

       -n, --digits=DIGITS
              use specified number of digits instead of 2

       -s, --quiet, --silent
              do not print counts of output file sizes

       -z, --elide-empty-files
              remove empty output files

       --help display this help and exit

       --version
              output version information and exit

       Read standard input if FILE is -.  Each PATTERN may be:

       INTEGER
              copy up to but not including specified line number

       /REGEXP/[OFFSET]
              copy up to but not including a matching line

       %REGEXP%[OFFSET]
              skip to, but not including a matching line

       `{INTEGER}`
              repeat the previous pattern specified number of times

       `{*}`    repeat the previous pattern as many times as possible

       A line OFFSET is a required "+" or "-" followed by a positive integer.

=== cut ===
 Print selected parts of lines from each FILE to standard output.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --bytes=LIST
              select only these bytes

       -c, --characters=LIST
              select only these characters

       -d, --delimiter=DELIM
              use DELIM instead of TAB for field delimiter

       -f, --fields=LIST
              select  only  these fields;  also print any line that contains no delimiter character, unless
              the -s option is specified

       -n     (ignored)

       --complement
              complement the set of selected bytes, characters or fields.

       -s, --only-delimited
              do not print lines not containing delimiters

       --output-delimiter=STRING
              use STRING as the output delimiter the default is to use the input delimiter

       --help display this help and exit

       --version
              output version information and exit

       Use one, and only one of -b, -c or -f.  Each LIST is made up of one range, or many ranges  separated
       by  commas.   Selected  input  is  written in the same order that it is read, and is written exactly
       once.  Each range is one of:

       N      N'th byte, character or field, counted from 1

       N-     from N'th byte, character or field, to end of line

       N-M    from N'th to M'th (included) byte, character or field

       -M     from first to M'th (included) byte, character or field

       With no FILE, or when FILE is -, read standard input.


=== date ===
 Display the current time in the given FORMAT, or set the system date.

       -d, --date=STRING
              display time described by STRING, not "now"

       -f, --file=DATEFILE
              like --date once for each line of DATEFILE

       -r, --reference=FILE
              display the last modification time of FILE

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 07 Aug 2006 12:34:56 -0600

       --rfc-3339=TIMESPEC
              output  date  and  time in RFC 3339 format.  TIMESPEC="date", "seconds", or "ns" for date and
              time to the indicated precision.  Date and time components are separated by a  single  space:
              2006-08-07 12:34:56-06:00

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  The only valid option for the second form specifies Coordinated Universal Time.  Interpreted sequences are:

`         %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     localeâs full month name (e.g., January)

       %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)

       %C     century; like %Y, except omit last two digits (e.g., 21)

       %d     day of month (e.g, 01)

       %D     date; same as %m/%d/%y

       %e     day of month, space padded; same as %_d

       %F     full date; same as %Y-%m-%d

       %g     last two digits of year of ISO week number (see %G)

       %G     year of ISO week number (see %V); normally useful only with %V

       %h     same as %b

       %H     hour (00..23)

       %I     hour (01..12)

       %j     day of year (001..366)

       %k     hour ( 0..23)

       %l     hour ( 1..12)

       %m     month (01..12)

       %M     minute (00..59)

       %n     a newline

       %N     nanoseconds (000000000..999999999)

       %p     locale's equivalent of either AM or PM; blank if not known

       %P     like %p, but lower case

       %r     locale's 12-hour clock time (e.g., 11:11:04 PM)

       %R     24-hour hour and minute; same as %H:%M

       %s     seconds since 1970-01-01 00:00:00 UTC

       %S     second (00..60)

       %t     a tab

       %T     time; same as %H:%M:%S

       %u     day of week (1..7); 1 is Monday

       %U     week number of year, with Sunday as first day of week (00..53)

       %V     ISO week number, with Monday as first day of week (01..53)

       %w     day of week (0..6); 0 is Sunday

       %W     week number of year, with Monday as first day of week (00..53)

       %x     locale's date representation (e.g., 12/31/99)

       %X     locale's time representation (e.g., 23:13:48)

       %y     last two digits of year (00..99)

       %Y     year

       %z     +hhmm numeric timezone (e.g., -0400)

       %:z    +hh:mm numeric timezone (e.g., -04:00)

       %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)

       %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)

       %Z     alphabetic time zone abbreviation (e.g., EDT)

       By default, date pads numeric fields with zeroes.  The following optional flags may follow "%":

       -      (hyphen) do not pad the field

       _      (underscore) pad with spaces

       0      (zero) pad with zeros

       ^      use upper case if possible

       `#`      use opposite case if possible

       After any flags comes an optional field width, as a decimal number; then an optional modifier, which
       is  either  E  to  use the locale's alternate representations if available, or O to use the locale's
       alternate numeric symbols if available.
`
=== dd ===

 Copy a file, converting and formatting according to the operands.

       bs=BYTES
              force ibs=BYTES and obs=BYTES

       cbs=BYTES
              convert BYTES bytes at a time

       conv=CONVS
              convert the file as per the comma separated symbol list

       count=BLOCKS
              copy only BLOCKS input blocks

       ibs=BYTES
              read BYTES bytes at a time

       if=FILE
              read from FILE instead of stdin

       iflag=FLAGS
              read as per the comma separated symbol list

       obs=BYTES
              write BYTES bytes at a time

       of=FILE
              write to FILE instead of stdout

       oflag=FLAGS
              write as per the comma separated symbol list

       seek=BLOCKS
              skip BLOCKS obs-sized blocks at start of output

       skip=BLOCKS
              skip BLOCKS ibs-sized blocks at start of input

       status=noxfer
              suppress transfer statistics

       BLOCKS and BYTES may be followed by the following multiplicative suffixes: xM M, c 1, w 2, b 512, kB
`           1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E,
       Z, Y.`

       Each CONV symbol may be:

       ascii  from EBCDIC to ASCII

       ebcdic from ASCII to EBCDIC

       ibm    from ASCII to alternate EBCDIC

       block  pad newline-terminated records with spaces to cbs-size

       unblock replace trailing spaces in cbs-size records with newline

       lcase  change upper case to lower case

       nocreat do not create the output file

       excl   fail if the output file already exists

       notrunc do not truncate the output file

       ucase  change lower case to upper case

       swab   swap every pair of input bytes

       noerror continue after read errors

       sync   pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs

       fdatasync physically write output file data before finishing

       fsync  likewise, but also write metadata

       Each FLAG symbol may be:

       append append mode (makes sense only for output; conv=notrunc suggested)

       direct use direct I/O for data

              directory fail unless a directory dsync     use synchronized I/O for data sync      likewise,
              but  also  for  metadata  nonblock   use non-blocking I/O noatime   do not update access time
              noctty    do not assign controlling terminal from file nofollow  do not follow symlinks

       Sending a USR1 signal to a running "dd" process makes it print I/O statistics to standard error  and
       then resume copying.

              $ dd if=/dev/zero of=/dev/null& pid=$!
              $ kill -USR1 $pid; sleep 1; kill $pid

              `18335302+0  records  in 18335302+0 records out 9387674624 bytes (9.4 GB) copied, 34.6279 seconds, 271 MB/s'

       Options are:

       --help display this help and exit

       --version output version information and exit


=== df ===

This manual page documents the GNU version of df.  df displays the amount of disk space available on
       the file system containing each file name argument.  If no file name is given, the  space  available
       on all currently mounted file systems is shown.  Disk space is shown in 1K blocks by default, unless
       the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.

       If an argument is the absolute file name of a disk device node containing a mounted file system,  df
       shows  the  space available on that file system rather than on the file system containing the device
       node (which is always the root file system).  This version of df cannot show the space available  on
       unmounted file systems, because on most kinds of systems doing so requires very nonportable intimate
       knowledge of file system structures.

OPTIONS
       Show information about the file system on which each FILE resides, or all file systems by default.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              include dummy file systems

       -B, --block-size=SIZE
              use SIZE-byte blocks

       -h, --human-readable
              print sizes in human readable format (e.g., 1K 234M 2G)

       -H, --si
              likewise, but use powers of 1000 not 1024

       -i, --inodes
              list inode information instead of block usage

       -k     like --block-size=1K

       -l, --local
              limit listing to local file systems

       --no-sync
              do not invoke sync before getting usage info (default)

       -P, --portability
              use the POSIX output format

       --sync invoke sync before getting usage info

       -t, --type=TYPE
              limit listing to file systems of type TYPE

       -T, --print-type
              print file system type

       -x, --exclude-type=TYPE
              limit listing to file systems not of type TYPE

       -v     (ignored)

       --help display this help and exit
`SIZE may be (or may be an integer optionally followed by) one of following:  kB  1000,  K  1024,  MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.`


=== dir ===
=== dircolors ===
=== dirname ===
=== du ===
=== echo ===
=== env ===
=== expand ===
=== expr ===
=== factor ===
=== false ===
=== fmt ===
=== fold ===
=== groups ===
=== head ===
=== hostid ===
=== id ===
=== install ===
=== join ===
=== link ===
=== ln ===
=== logname ===
=== ls ===
=== md5sum ===
=== mkdir ===
=== mkfifo ===
=== mknod ===
=== mv ===
=== nice ===
=== nl ===
=== nohup ===
=== od ===
=== paste ===
=== pathchk ===
=== pinky ===
=== pr ===
=== printenv ===
=== printf ===
=== ptx ===
=== pwd ===
=== readlink ===
=== rm ===
=== rmdir ===
=== sha1sum ===
=== seq ===
=== shred ===
=== sleep ===
=== sort ===
=== split ===
=== stat ===
=== stty ===
=== sum ===
=== sync ===
=== tac ===
=== tail ===
=== tee ===
=== test ===
=== touch ===
=== tr ===
=== true ===
=== tsort ===
=== tty ===
=== uname ===
=== unexpand ===
=== uniq ===
=== unlink ===
=== users ===
=== vdir ===
=== wc ===
=== who ===
=== whoami ===
=== yes ===

== Disk Utils ==
 * gpart
 * e2fsprogs 
 * xfsprogs
 * jfsutils
 * reiser4progs
 * dosfstools
 * ntfsprogs
 * hfsprogs 
 * mtd-utils, genromfs. ocfs2-tools, nilfs2-tools 

== Compression tools ==
=== Anti Virus=== 
=== SPAM Filters ===
=== File Management tools ===
=== Archiving===
=== Backups===
=== Time snapshots of disk===
=== Disk Management tools ===