#summary This Module introduces the concept of data storage techniques with specific focus on Relational databases and its management


= Introduction =

Computers are used to store data. From the analysis of data, we obtain information. The way in which data is organised or arranged has evolved historically. This is different from ideas such has puched card, tape, magnetic disk, semiconductor etc. which are more of a hardware technology.

By organisation of data for this module we are looking at a more abstract concept. Let us take an example. 

Suppose an application is to be designed for preparing time table and attendance of students and teachers. We are then thinking in terms of subjects, days, holidays, teachers, students, rooms, time etc as logical way of organising data.

Suppose that we want offer this service on web to many schools across India at various schools at various locations. Then we are thinking in terms of states, location, different state boards and the such. We need to think of ways in which we have to organise the data.

Then we have various issues like how to get the data into the application, generating different daily, monthly, yearly reports from the data, ensuring the application is almost always available, taking care of any problems (or bugs as known in Software Industry / or issues as kcommonly referred to as in the rest of the IT industry), request for new features by users or necessitated by change of rules etc.

In this module our focus will be on the logical way data is arranged.

= Some History =

Data storage is not a new concept. We have as old a medium as cave paintings, stone carvings and the such. More recently paper took the role of that. Now we are in the age where it is stored in magnetic/optical/semiconductor media.

In the computer industry historically the organisation consisted of Hierarchical , network databases. Relational databases were developed later. the evolution has not stopped. Today we have vary large amount of data stored on the web by companies like yahoo, google using a more web friendly technology which provides distributed and highly available database.

Today a huge amount of project use a Relational Data Base Management System (RDBMS) a lot for various reasons:

 * Ubiquitous availability in both proprietary and Free/Open source licences
 * A large pool of people trained in this technology
 * Well tested technology in production environments

#sidebar
A note on environments:

Usually a project will had three distinct environments
 * Development
 * User Acceptance Testing (UAT)
 * Production or Live

Generally all the development takes place in the development environment. When the development team feels it is ready for testing, they release it on the UAT for some of the users to test the application functionality. 

When the users and the development team are satisfied that the application can be deployed, a planned release of the application is made on the Live or Production environment.

Fast forward to present. One of the simplest organising method is a list where seperate items are appear in its own line. we will call this line a row. For example List of teachers. Now we want to identify the subject which they will be teaching. We then write down the subject to right of their names. 

But this sort of writing down will result in duplicate appearances of subject against teacher name. For example if three teachers teach english, the datapoint english will appear three times. One of the main problem that Relational datamodel addresses is this: avoid data duplication. 

So we then remodel out data as three distinct lists: Teachers, Subjects and Teacher-Subject.

eg.

||Teachers||
|| Code || Name||
|| 1    || A||
|| 2    || B||
|| 3    || C||
||4     || D||

||Subjects||
||Code ||Name||
||1    ||English||
||2    ||Science||
||3    ||Mathematics||
||4    ||IT Practices||
||5    ||Social Science||

Note that in the above two tables, the nuber is associated with the names and they are unique. Assuming 
Teachers A and C teach English,
Teacher B teaches Mathematics and
Teacher D and C teach Science, The teacher-Subject list would look like

||Teacher-Subject||
||Tcode ||Scode||
||1 (A) ||1 (English)||
||2 (B) ||3 (MAthematics)||
||3 (C) ||1 (English)||
||3 (C) ||2 (Science)||
||4 (D) ||2 (Science)||

The words in () is for illustrative purposes. The actual list would contain the following data where all are numbers and no text.

||Teacher-Subject||
||Tcode ||Scode||
||1     ||1||
||2     ||3||
||3     ||1||
||3     ||2||
||4     ||2||

This is known a many to many relationship in the relational model where one teacher can take many subject and one subject can be taught multiple teachers.

In formal language, each of the above list is known as Table or relation. Each horizontal list of values is known as Row/Tuple and Each vertical list is known as Column/Attribute.

Often in the formal text books one would come across the terminology of Relation/Tuple/Attribute and most user manuals use the term Table/Row/Column

Using the above terminology, the serial number and name are the columns in the teachers table.

Now let us suppose we want to store the phone numbers of the teacher. We can readily see that we just need to add one more column to the table teacher.

If a new subject is added to the syllabus, one just need to add one row to the subjects column with a distinct or non duplicate number for the subject.

If a teacher's name changes, say after marriage, one just need to update that particular teacher's name accordingly.

Now that we have got the data into the table, we need to know now who teaches what. The steps are:

 # Select first name of the list
 # Look up the Teacher-Subject table where the code of teacher corresponds to the code that we have from the step one
 # read the list of subject code if more than one is there
 # read off the list of subjects we get in step 3 from the subjects table
 # print it out
 # repeat steps 1-5 till all the teachers code have been done with

Quite simple really!!

Most RDBMS use what is known as Structured Query Language or SQL in short for that purpose. So in that language the above six steps are done by the statement:

{{{
SELECT Teachers.name, Subjects.name from teacher, subjects, teacher-subject
   WHERE teacher-subject.tcode = teachers.code ;
}}}

If you noticed the above statement, we just mentioned _what_ to do. Nowhere did we mention _how_ to do. That usually is the responsibility of the RDBMS Engine/Software.

Because the procedure for obtaining the data was not explicitly spelled out as we did in the steps 1-6 above in SQL, this language is often referred to as non-procedural language.

Before the advent of SQL, the developers had to know not only what data was needed, but also where the data resided and had to specify how to access that data in the application.


== Commonly available RDBMS ==


The following table lists some of the most commonly used RDBMS
|| RDBMS || Free/Proprietary || Remarks ||
|| PostgreSQL || Free || A true RDBMS ||
|| MySQL || Dual Licencing ||Initially was not treated as a true RDBMS but over time it gained many RDBMS features ||
|| Firebird || Free || ||
||DB2 from IBM || Proprietary || Very feature rich RDBMS ||
|| Oracle || Proprietary || Very feature rich RDBMS ||





Add your content here.  Format your content with:

  * Text in *bold* or _italic_

  * Headings, paragraphs, and lists
 
 * Automatic links to other wiki pages



(For reference -- to be removed in the final version)
http://www.databasejournal.com/sqletc/article.php/1428721/Introduction-to-Databases-for-the-Web-Pt-1.htm