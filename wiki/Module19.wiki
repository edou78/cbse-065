<hr/>

|| *Content* || Introduction to Programming – Modular Programming, Object Oriented Programming, Event Driven Programming  ||
|| *Team* || Siddharth Srivastava||
|| *Discussion Page* || [http://groups.google.co.in/group/cbse065/browse_thread/thread/a8d73c17b4614a32] ||


<hr/>

<wiki:toc max_depth="3" />


= Introduction =


*Computer programming* (often shortened to programming or coding) is the process of writing, testing, debugging/troubleshooting, and maintaining the source code of computer programs. This source code is written in a programming language.

A *Programming language* is a standardized communication technique for expressing instruction to a computer. Programming languages enable a programmer to precisely specify what data a computer will act upon, how these data will be stored/transmitted, and precisely what actions to take under various circumstances.
Many programming languages have some form of written specification of their syntax (form) and semantics (meaning). Some languages are defined by a specification document. For example, the C programming language is specified by an ISO Standard. Other languages, such as Perl, have a dominant implementation that is used as a reference.

= Modular Programming =

Modular programming is a software design technique that increases the extent to which software is composed from separate parts, called modules. It is also called Structered Programming.It is a subset of procedural programming that enforces a logical structure on the program being written to make it more efficient and easier to understand and modify. Infact Modular programming is subdividing your program into separate subprograms such as functions and subroutines.
Modular programming can be used to break up a large program into manageable units, or to create code that can be easily re-used.  A modular program consists of a main module and one or more auxiliary modules.  Each module originates from a separate source code file.

== Advantages of Modular Programming ==

1) Distributed Development:  It's main essence is reusability of code. The _Open Source Software_ has proven to be of immense help to this. For example, if your program needs initial and boundary conditions, use subroutines to set them. Then if someone else wants to compute a different solution using your program, only these subroutines need to be changed. This is a lot easier than having to read through a program line by line, trying to figure out what each line is supposed to do and whether it needs to be changed. And in ten years from now, you yourself will probably no longer remember how the program worked. 

2) Subprograms make your actual program shorter, hence easier to read and understand. Further, the arguments show exactly what information a subprogram is using.

3) Subprograms make it simpler to figure out how the program operates. If the boundary conditions are implemented using a subroutine, the program can be searched for this subroutine to find all places where the boundary conditions are used.

4) Subprograms reduce the likelyhood of bugs. Because subprograms can use local variables, there is less change that the code in the subroutine interferes with that of the program itself, or with that in other subprograms.

=== Modular Programming in Java ===

- Define new class in terms of old ones.

- Keeps classes small.

               It has long been possible to put a bunch of libraries on the Java classpath and run an application. The NetBeans Platform takes the management of libraries further—by actively taking part in the loading of libraries and enforcing that the minimum version of a library that another library uses is adequate.

= Object Oriented Programming = 

Object-oriented programming (OOP) is a programming language model organized around "objects" rather than "actions" and data rather than logic.Object-oriented programming takes the view that what we really care about are the objects we want to manipulate rather than the logic required to manipulate them.
 
== Basic Concepts == 

=== Object ===

The fundamental idea behind object orientation is to combine both data and functions that operate upon them under a single unit called *object*. Software objects are often used to model the real-world objects that you find in everyday life. Object have characteristics and behavior.
Technically, Programmers developing a system model create object classes to represent each component of a system. Those generic classes are then used to create specific instances of each object for use in the program. Objects may interact with each other through the use of methods.
Examples of objects range from human beings (described by name, address, and so forth) to buildings and floors (whose properties can be described and managed) down to the little widgets on your computer desktop (such as buttons and scroll bars).

=== Class ===

In OOP, objects are members of classes. It defines the characteristics and behavior of an object. 
Example: There may be thousands of other bicycles in existence, all of the same make and model. Each bicycle was built from the same set of blueprints and therefore contains the same components. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles.

=== Inheritence ===

The idea of classes leads to the idea of inheritance. Inheritance provides a powerful and natural mechanism for organizing and structuring your software. 
In object-oriented programming, inheritance is the concept that when a class of objects is defined, any subclass that is defined can inherit the definitions of one or more general classes. This means for the programmer that an object in a subclass need not carry its own definition of data and methods that are generic to the class (or classes) of which it is a part. This not only speeds up program development; it also ensures an inherent validity to the defined subclass object (what works and is consistent about the class will also work for the subclass).
Example: Class of vehicles is divided into cars, trucks, buses and motorcycles.

=== Encapsulation ===

Encapsulation conceals the functional details of a class from objects that send messages to it.
In object-oriented programming, information hiding or encapsulation (by way of nesting of types) reduces software development risk by shifting the code's dependency on an uncertain implementation (design decision) onto a well-defined interface. Clients of the interface perform operations purely through it so if the implementation changes, the clients do not have to change.

=== Message ===

A message in its most general meaning is an object of communication. It is a vessel which provides information. 

=== Polymorphism ===

Subtype polymorphism, almost universally called just polymorphism in the context of object-oriented programming, is the ability of one type, A, to appear as and be used like another type, B.
Polymorphism allows the programmer to treat derived class members just like their parent class' members. More precisely, Polymorphism in object-oriented programming is the ability of objects belonging to different data types to respond to method calls of methods of the same name, each one according to an appropriate type-specific behavior. One method, or an operator such as +, -, or *, can be abstractly applied in many different situations.
* Overriding Polymorphism * If a Dog is commanded to speak(), this may elicit a bark(). However, if a Pig is commanded to speak(), this may elicit an oink(). They both inherit speak() from Animal, but their derived class methods override the methods of the parent class; this is Overriding Polymorphism.

* Overloading Polymorphism * Overloading Polymorphism is the use of one method signature, or one operator such as "+", to perform several different functions depending on the implementation. The "+" operator, for example, may be used to perform integer addition, float addition, list concatenation, or string concatenation.