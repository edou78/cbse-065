<hr/>

|| *Content* || *Utility Software* Compression tools, Anti Virus, SPAM Filters, File Management tools, Archiving, Backups, Time snapshots of disk and Disk Management tools ||
|| *Team* || J T D'souza  ||
|| *Discussion Page* || [http://groups.google.com/group/cbse065/browse_thread/thread/afae959fd217d881] ||
|| *Changes* || http://code.google.com/p/cbse-065/source/diff?path=/wiki/module8.wiki&format=side&r=-1 || 
|| *Old Version List* || http://code.google.com/p/cbse-065/source/list?path=/wiki/module8.wiki ||

<hr/>

<wiki:toc max_depth="5" />

= Introduction =

Standard utilities available on a GNU/Linux OS


= Details =

This module provides an introduction to the standard utilities available on a GNU/Linux OS installation. We shall cover the features of each utility and the command line syntax for doing typical administrative tasks.

We shall be using debian distribution named Lenny. However what we learn here will be applicable on almost any GNU/Linux distribution like Fedora, Suse, Mandriva, Ubuntu, Slacware etc. Embedded distributions like DSL, MontaVista, Emdebian etc, may not have all the utilities and even included utilities will have several features missing. 

Utilities are small command line programs used to do mundane installation, maintanence, configuration and testing tasks.
These programs can be divided into a few broad categories
 #1 Shell
 #2 Disk utils
 #3 File and directory utils
 #4 Network utils
 #5 Search utils
 #6 Install utils
 #7 Editors
 #8 Others

== Shell == C FSF
The shell is a macroprocessor that exucutes commands, which are created using it's internal programming language and /or it's builtin commands. 
A Unix shell is both a command interpreter and a programming language. As a command interpreter, the shell provides a user interface to other utilities such as those listed above. The programming language features allow these utilities to be combined. Files containing commands can be created, and become commands themselves. These new commands have the same status as system commands in directories such as /bin, allowing users or groups to establish custom environments to automate their common tasks.

Shells may be used interactively or non-interactively. In interactive mode, they accept input typed from the keyboard. When executing non-interactively, shells execute commands read from a file.

A shell allows execution of gnu commands, both synchronously and asynchronously. The shell waits for synchronous commands to complete before accepting more input; asynchronous commands continue to execute in parallel with the shell while it reads and executes additional commands. The redirection constructs permit fine-grained control of the input and output of those commands. Moreover, the shell allows control over the contents of commands' environments.

Shells also provide a small set of built-in commands (builtins) implementing functionality impossible or inconvenient to obtain via separate utilities. For example, cd, break, continue, and exec) cannot be implemented outside of the shell because they directly manipulate the shell itself. The history, getopts, kill, or pwd builtins, among others, could be implemented in separate utilities, but they are more convenient to use as builtin commands. All of the shell builtins are described in subsequent sections.

While executing commands is essential, most of the power (and complexity) of shells is due to their embedded programming languages. Like any high-level language, the shell provides variables, flow control constructs, quoting, and functions.

Shells offer features geared specifically for interactive use rather than to augment the programming language. These interactive features include job control, command line editing, command history and aliases. Each of these features is described here.

There are several flavours of shells like 
 * Sh shell 
 * C shell - Csh
 * Korn shell - Ksh
 * Bourne shell - bash

The bash shell is the most widely used shell in most FLOSS distributions.

== Basic Shell Features ==

Bash is an acronym for ‘Bourne-Again SHell’. The Bourne shell is the traditional Unix shell originally written by Stephen Bourne. All of the Bourne shell builtin commands are available in Bash, The rules for evaluation and quoting are taken from the posix specification for the `standard' Unix shell.

This chapter briefly summarizes the shell's `building blocks': commands, control structures, shell functions, shell parameters, shell expansions, redirections, which are a way to direct input and output from and to named files, and how the shell executes commands. Typing "man bash" on the shell command prompt will give you all the stuff we have printed below. 

    #1 Shell Syntax: What your input means to the shell.
    #2 Shell Commands: The types of commands you can use.
    #3 Shell Functions: Grouping commands by name.
    #4 Shell Parameters: How the shell stores values.
    #5 Shell Expansions: How Bash expands parameters and the various expansions available.
    #6 Redirections: A way to control where input and output go.
    #7 Executing Commands: What happens when you run a command.
    #8 Shell Scripts: Executing files of shell commands. 

=== Shell Syntax ===

    * Shell Operation: The basic operation of the shell.
    * Quoting: How to remove the special meaning from characters.
    * Comments: How to specify comments. 

When the shell reads input, it proceeds through a sequence of operations. If the input indicates the beginning of a comment, the shell ignores the comment symbol (‘#’), and the rest of that line.

Otherwise, roughly speaking, the shell reads its input and divides the input into words and operators, employing the quoting rules to select which meanings to assign various words and characters.

The shell then parses these tokens into commands and other constructs, removes the special meaning of certain words or characters, expands others, redirects input and output as needed, executes the specified command, waits for the command's exit status, and makes that exit status available for further inspection or processing. 

====  Shell Operation ====

The following is a brief description of the shell's operation when it reads and executes a command. Basically, the shell does the following:

   1. Reads its input from a file (see Shell Scripts), from a string supplied as an argument to the -c invocation option (see Invoking Bash), or from the user's terminal.
   2. Breaks the input into words and operators, obeying the quoting rules described in Quoting. These tokens are separated by metacharacters. Alias expansion is performed by this step (see Aliases).
   3. Parses the tokens into simple and compound commands (see Shell Commands).
   4. Performs the various shell expansions (see Shell Expansions), breaking the expanded tokens into lists of filenames (see Filename Expansion) and commands and arguments.
   5. Performs any necessary redirections (see Redirections) and removes the redirection operators and their operands from the argument list.
   6. Executes the command (see Executing Commands).
   7. Optionally waits for the command to complete and collects its exit status (see Exit Status). 

==== Quoting ====

    * Escape Character: How to remove the special meaning from a single character.
    * Single Quotes: How to inhibit all interpretation of a sequence of characters.
    * Double Quotes: How to suppress most of the interpretation of a sequence of characters.
    * ANSI-C Quoting: How to expand ANSI-C sequences in quoted strings.
    * Locale Translation: How to translate strings into different languages. 

Quoting is used to remove the special meaning of certain characters or words to the shell. Quoting can be used to disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.

Each of the shell metacharacters (see Definitions) has special meaning to the shell and must be quoted if it is to represent itself. When the command history expansion facilities are being used (see History Interaction), the history expansion character, usually ‘!’, must be quoted to prevent history expansion. See Bash History Facilities, for more details concerning history expansion.

There are three quoting mechanisms: the escape character, single quotes, and double quotes.
 
===== Escape Character =====

A non-quoted backslash ‘\’ is the Bash escape character. It preserves the literal value of the next character that follows, with the exception of newline. If a \newline pair appears, and the backslash itself is not quoted, the \newline is treated as a line continuation (that is, it is removed from the input stream and effectively ignored). 
Single Quotes

Enclosing characters in single quotes (‘'’) preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash. 

===== Double Quotes =====

Enclosing characters in double quotes (‘"’) preserves the literal value of all characters within the quotes, with the exception of ‘$’, ‘`’, ‘\’, and, when history expansion is enabled, ‘!’. The characters ‘$’ and ‘`’ retain their special meaning within double quotes (see Shell Expansions). The backslash retains its special meaning only when followed by one of the following characters: ‘$’, ‘`’, ‘"’, ‘\’, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an ‘!’ appearing in double quotes is escaped using a backslash. The backslash preceding the ‘!’ is not removed.

The special parameters {{{ ‘*’ }}} and ‘@’ have special meaning when in double quotes (see Shell Parameter Expansion). 

===== ANSI-C Quoting =====

Words of the form $'string' are treated specially. The word expands to string, with backslash-escaped characters replaced as specified by the ANSI C standard. Backslash escape sequences, if present, are decoded as follows:

\a
    alert (bell)
\b
    backspace
\e
    an escape character (not ANSI C)
\f
    form feed
\n
    newline
\r
    carriage return
\t
    horizontal tab
\v
    vertical tab
\\
    backslash
\'
    single quote
\nnn
    the eight-bit character whose value is the octal value nnn (one to three digits)
\xHH
    the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
\cx
    a control-x character 

The expanded result is single-quoted, as if the dollar sign had not been present. 


===== Locale-Specific Translation =====

A double-quoted string preceded by a dollar sign (‘$’) will cause the string to be translated according to the current locale. If the current locale is C or POSIX, the dollar sign is ignored. If the string is translated and replaced, the replacement is double-quoted.

Some systems use the message catalog selected by the LC_MESSAGES shell variable. Others create the name of the message catalog from the value of the TEXTDOMAIN shell variable, possibly adding a suffix of ‘.mo’. If you use the TEXTDOMAIN variable, you may need to set the TEXTDOMAINDIR variable to the location of the message catalog files. Still others use both variables in this fashion: TEXTDOMAINDIR/LC_MESSAGES/LC_MESSAGES/TEXTDOMAIN.mo.

===== Comments =====

In a non-interactive shell, or an interactive shell in which the interactive_comments option to the shopt builtin is enabled (see The Shopt Builtin), a word beginning with ‘#’ causes that word and all remaining characters on that line to be ignored. An interactive shell without the interactive_comments option enabled does not allow comments. The interactive_comments option is on by default in interactive shells. See Interactive Shells, for a description of what makes a shell interactive. 

== Shell Commands ==

A simple shell command such as echo a b c consists of the command itself followed by arguments, separated by spaces.

More complex shell commands are composed of simple commands arranged together in a variety of ways: in a pipeline in which the output of one command becomes the input of a second, in a loop or conditional construct, or in some other grouping.

=== Simple Commands: === The most common type of command.

=== Pipelines: === Connecting the input and output of several commands.

=== Lists: === How to execute commands sequentially.

=== Compound Commands: === Shell commands for control flow.

=== Coprocesses: === Two-way communication between commands. 

=== Simple Commands ===

A simple command is the kind of command encountered most often. It's just a sequence of words separated by blanks, terminated by one of the shell's control operators (see Definitions). The first word generally specifies a command to be executed, with the rest of the words being that command's arguments.

The return status (see Exit Status) of a simple command is its exit status as provided by the posix 1003.1 waitpid function, or 128+n if the command was terminated by signal n. 

eg. ls 
will list the contents of the current directory
ls -l will list the contents of the current directory but in the long format

=== Pipelines ===

A pipeline is a sequence of simple commands separated by one of the control operators ‘|’ or ‘|&’.

The format for a pipeline is

     [time [-p]] [!] command1 [ [| or |&] command2 ...]

The output of each command in the pipeline is connected via a pipe to the input of the next command. That is, each command reads the previous command's output. This connection is performed before any redirections specified by the command.

If ‘|&’ is used, the standard error of command1 is connected to command2's standard input through the pipe; it is shorthand for 2>&1 |. This implicit redirection of the standard error is performed after any redirections specified by the command.

The reserved word time causes timing statistics to be printed for the pipeline once it finishes. The statistics currently consist of elapsed (wall-clock) time and user and system time consumed by the command's execution. The -p option changes the output format to that specified by posix. The TIMEFORMAT variable may be set to a format string that specifies how the timing information should be displayed. See Bash Variables, for a description of the available formats. The use of time as a reserved word permits the timing of shell builtins, shell functions, and pipelines. An external time command cannot time these easily.

If the pipeline is not executed asynchronously (see Lists), the shell waits for all commands in the pipeline to complete.

Each command in a pipeline is executed in its own subshell (see Command Execution Environment). The exit status of a pipeline is the exit status of the last command in the pipeline, unless the pipefail option is enabled (see The Set Builtin). If pipefail is enabled, the pipeline's return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully. If the reserved word ‘!’ precedes the pipeline, the exit status is the logical negation of the exit status as described above. The shell waits for all commands in the pipeline to terminate before returning a value. 

=== Lists of Commands ===

A list is a sequence of one or more pipelines separated by one of the operators ‘;’, ‘&’, ‘&&’, or ‘||’, and optionally terminated by one of ‘;’, ‘&’, or a newline.

Of these list operators, ‘&&’ and ‘||’ have equal precedence, followed by ‘;’ and ‘&’, which have equal precedence.

A sequence of one or more newlines may appear in a list to delimit commands, equivalent to a semicolon.

If a command is terminated by the control operator ‘&’, the shell executes the command asynchronously in a subshell. This is known as executing the command in the background. The shell does not wait for the command to finish, and the return status is 0 (true). When job control is not active (see Job Control), the standard input for asynchronous commands, in the absence of any explicit redirections, is redirected from /dev/null.

Commands separated by a ‘;’ are executed sequentially; the shell waits for each command to terminate in turn. The return status is the exit status of the last command executed.

and and or lists are sequences of one or more pipelines separated by the control operators ‘&&’ and ‘||’, respectively. and and or lists are executed with left associativity.

An and list has the form

     command1 && command2

command2 is executed if, and only if, command1 returns an exit status of zero.

An or list has the form

     command1 || command2

command2 is executed if, and only if, command1 returns a non-zero exit status.

The return status of and and or lists is the exit status of the last command executed in the list. 

=== Compound Commands ===

    * Looping Constructs: Shell commands for iterative action.
    * Conditional Constructs: Shell commands for conditional execution.
    * Command Grouping: Ways to group commands. 

Compound commands are the shell programming constructs. Each construct begins with a reserved word or control operator and is terminated by a corresponding reserved word or operator. Any redirections (see Redirections) associated with a compound command apply to all commands within that compound command unless explicitly overridden.

Bash provides looping constructs, conditional commands, and mechanisms to group commands and execute them as a unit. 

=== Coprocesses ===

A coprocess is a shell command preceded by the coproc reserved word. A coprocess is executed asynchronously in a subshell, as if the command had been terminated with the ‘&’ control operator, with a two-way pipe established between the executing shell and the coprocess.

The format for a coprocess is:

     coproc [NAME] command [redirections]

This creates a coprocess named NAME. If NAME is not supplied, the default name is COPROC. NAME must not be supplied if command is a simple command (see Simple Commands); otherwise, it is interpreted as the first word of the simple command.

When the coproc is executed, the shell creates an array variable (see Arrays) named NAME in the context of the executing shell. The standard output of command is connected via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to NAME[0]. The standard input of command is connected via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to NAME[1]. This pipe is established before any redirections specified by the command (see Redirections). The file descriptors can be utilized as arguments to shell commands and redirections using standard word expansions.

The process id of the shell spawned to execute the coprocess is available as the value of the variable NAME_PID. The wait builtin command may be used to wait for the coprocess to terminate.

The return status of a coprocess is the exit status of command. 

== Shell Functions ==

Shell functions are a way to group commands for later execution using a single name for the group. They are executed just like a "regular" command. When the name of a shell function is used as a simple command name, the list of commands associated with that function name is executed. Shell functions are executed in the current shell context; no new process is created to interpret them.

Functions are declared using this syntax:

     [ function ] name () compound-command [ redirections ]

This defines a shell function named name. The reserved word function is optional. If the function reserved word is supplied, the parentheses are optional. The body of the function is the compound command compound-command (see Compound Commands). That command is usually a list enclosed between { and }, but may be any compound command listed above. compound-command is executed whenever name is specified as the name of a command. Any redirections (see Redirections) associated with the shell function are performed when the function is executed.

A function definition may be deleted using the -f option to the unset builtin (see Bourne Shell Builtins).

The exit status of a function definition is zero unless a syntax error occurs or a readonly function with the same name already exists. When executed, the exit status of a function is the exit status of the last command executed in the body.

Note that for historical reasons, in the most common usage the curly braces that surround the body of the function must be separated from the body by blanks or newlines. This is because the braces are reserved words and are only recognized as such when they are separated from the command list by whitespace or another shell metacharacter. Also, when using the braces, the list must be terminated by a semicolon, a ‘&’, or a newline.

When a function is executed, the arguments to the function become the positional parameters during its execution (see Positional Parameters). The special parameter ‘#’ that expands to the number of positional parameters is updated to reflect the change. Special parameter 0 is unchanged. The first element of the FUNCNAME variable is set to the name of the function while the function is executing. All other aspects of the shell execution environment are identical between a function and its caller with the exception that the DEBUG and RETURN traps are not inherited unless the function has been given the trace attribute using the declare builtin or the -o functrace option has been enabled with the set builtin, (in which case all functions inherit the DEBUG and RETURN traps). See Bourne Shell Builtins, for the description of the trap builtin.

If the builtin command return is executed in a function, the function completes and execution resumes with the next command after the function call. Any command associated with the RETURN trap is executed before execution resumes. When a function completes, the values of the positional parameters and the special parameter ‘#’ are restored to the values they had prior to the function's execution. If a numeric argument is given to return, that is the function's return status; otherwise the function's return status is the exit status of the last command executed before the return.

Variables local to the function may be declared with the local builtin. These variables are visible only to the function and the commands it invokes.

Function names and definitions may be listed with the -f option to the declare or typeset builtin commands (see Bash Builtins). The -F option to declare or typeset will list the function names only (and optionally the source file and line number, if the extdebug shell option is enabled). Functions may be exported so that subshells automatically have them defined with the -f option to the export builtin (see Bourne Shell Builtins). Note that shell functions and variables with the same name may result in multiple identically-named entries in the environment passed to the shell's children. Care should be taken in cases where this may cause a problem.

Functions may be recursive. No limit is placed on the number of recursive calls. 

== Shell Parameters ==

    * Positional Parameters: The shell's command-line arguments.
    * Special Parameters: Parameters denoted by special characters. 

A parameter is an entity that stores values. It can be a name, a number, or one of the special characters listed below. A variable is a parameter denoted by a name. A variable has a value and zero or more attributes. Attributes are assigned using the declare builtin command (see the description of the declare builtin in Bash Builtins).

A parameter is set if it has been assigned a value. The null string is a valid value. Once a variable is set, it may be unset only by using the unset builtin command.

A variable may be assigned to by a statement of the form

     name=[value]

If value is not given, the variable is assigned the null string. All values undergo tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal (detailed below). If the variable has its integer attribute set, then value is evaluated as an arithmetic expression even if the $((...)) expansion is not used (see Arithmetic Expansion). Word splitting is not performed, with the exception of "$@" as explained below. Filename expansion is not performed. Assignment statements may also appear as arguments to the alias, declare, typeset, export, readonly, and local builtin commands.

In the context where an assignment statement is assigning a value to a shell variable or array index (see Arrays), the ‘+=’ operator can be used to append to or add to the variable's previous value. When ‘+=’ is applied to a variable for which the integer attribute has been set, value is evaluated as an arithmetic expression and added to the variable's current value, which is also evaluated. When ‘+=’ is applied to an array variable using compound assignment (see Arrays), the variable's value is not unset (as it is when using ‘=’), and new values are appended to the array beginning at one greater than the array's maximum index (for indexed arrays), or added as additional key-value pairs in an associative array. When applied to a string-valued variable, value is expanded and appended to the variable's value. 

=== Positional Parameters ===

A positional parameter is a parameter denoted by one or more digits, other than the single digit 0. Positional parameters are assigned from the shell's arguments when it is invoked, and may be reassigned using the set builtin command. Positional parameter N may be referenced as ${N}, or as $N when N consists of a single digit. Positional parameters may not be assigned to with assignment statements. The set and shift builtins are used to set and unset them (see Shell Builtin Commands). The positional parameters are temporarily replaced when a shell function is executed (see Shell Functions).

When a positional parameter consisting of more than a single digit is expanded, it must be enclosed in braces. 

=== Special Parameters ===

The shell treats several parameters specially. These parameters may only be referenced; assignment to them is not allowed.

{{{ * }}}
    Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the IFS special variable. That is, {{{ "$*" }}} is equivalent to "$1c$2c...", where c is the first character of the value of the IFS variable. If IFS is unset, the parameters are separated by spaces. If IFS is null, the parameters are joined without intervening separators.
@
    Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word. That is, "$@" is equivalent to "$1" "$2" .... If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. When there are no positional parameters, "$@" and $@ expand to nothing (i.e., they are removed).
#
    Expands to the number of positional parameters in decimal.
?
    Expands to the exit status of the most recently executed foreground pipeline.
-
    (A hyphen.) Expands to the current option flags as specified upon invocation, by the set builtin command, or those set by the shell itself (such as the -i option).
$
    Expands to the process id of the shell. In a () subshell, it expands to the process id of the invoking shell, not the subshell.
!
    Expands to the process id of the most recently executed background (asynchronous) command.
0
    Expands to the name of the shell or shell script. This is set at shell initialization. If Bash is invoked with a file of commands (see Shell Scripts), $0 is set to the name of that file. If Bash is started with the -c option (see Invoking Bash), then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the filename used to invoke Bash, as given by argument zero.
_
    (An underscore.) At shell startup, set to the absolute pathname used to invoke the shell or shell script being executed as passed in the environment or argument list. Subsequently, expands to the last argument to the previous command, after expansion. Also set to the full pathname used to invoke each command executed and placed in the environment exported to that command. When checking mail, this parameter holds the name of the mail file. 

== Shell Expansions ==

Expansion is performed on the command line after it has been split into tokens. There are seven kinds of expansion performed:

    * brace expansion
    * tilde expansion
    * parameter and variable expansion
    * command substitution
    * arithmetic expansion
    * word splitting
    * filename expansion 

    * Brace Expansion: Expansion of expressions within braces.
    * Tilde Expansion: Expansion of the ~ character.
    * Shell Parameter Expansion: How Bash expands variables to their values.
    * Command Substitution: Using the output of a command as an argument.
    * Arithmetic Expansion: How to use arithmetic in shell expansions.
    * Process Substitution: A way to write and read to and from a command.
    * Word Splitting: How the results of expansion are split into separate arguments.
    * Filename Expansion: A shorthand for specifying filenames matching patterns.
    * Quote Removal: How and when quote characters are removed from words. 

The order of expansions is: brace expansion, tilde expansion, parameter, variable, and arithmetic expansion and command substitution (done in a left-to-right fashion), word splitting, and filename expansion.

On systems that can support it, there is an additional expansion available: process substitution. This is performed at the same time as parameter, variable, and arithmetic expansion and command substitution.

Only brace expansion, word splitting, and filename expansion can change the number of words of the expansion; other expansions expand a single word to a single word. The only exceptions to this are the expansions of "$@" (see Special Parameters) and "${name[@]}" (see Arrays).

After all expansions, quote removal (see Quote Removal) is performed. 

=== Brace Expansion ===

Brace expansion is a mechanism by which arbitrary strings may be generated. This mechanism is similar to filename expansion (see Filename Expansion), but the file names generated need not exist. Patterns to be brace expanded take the form of an optional preamble, followed by either a series of comma-separated strings or a seqeunce expression between a pair of braces, followed by an optional postscript. The preamble is prefixed to each string contained within the braces, and the postscript is then appended to each resulting string, expanding left to right.

Brace expansions may be nested. The results of each expanded string are not sorted; left to right order is preserved. For example,

     bash$ echo a{d,c,b}e
     ade ace abe

A sequence expression takes the form {x..y[incr]}, where x and y are either integers or single characters, and incr, an optional increment, is an integer. When integers are supplied, the expression expands to each number between x and y, inclusive. Supplied integers may be prefixed with ‘0’ to force each term to have the same width. When either x or y begins with a zero, the shell attempts to force all generated terms to contain the same number of digits, zero-padding where necessary. When characters are supplied, the expression expands to each character lexicographically between x and y, inclusive. Note that both x and y must be of the same type. When the increment is supplied, it is used as the difference between each term. The default increment is 1 or -1 as appropriate.

Brace expansion is performed before any other expansions, and any characters special to other expansions are preserved in the result. It is strictly textual. Bash does not apply any syntactic interpretation to the context of the expansion or the text between the braces. To avoid conflicts with parameter expansion, the string ‘${’ is not considered eligible for brace expansion.

A correctly-formed brace expansion must contain unquoted opening and closing braces, and at least one unquoted comma or a valid sequence expression. Any incorrectly formed brace expansion is left unchanged.

A { or ‘,’ may be quoted with a backslash to prevent its being considered part of a brace expression. To avoid conflicts with parameter expansion, the string ‘${’ is not considered eligible for brace expansion.

This construct is typically used as shorthand when the common prefix of the strings to be generated is longer than in the above example:

     mkdir /usr/local/src/bash/{old,new,dist,bugs}

or

     {{{ chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}} }}}

=== Tilde Expansion ===

If a word begins with an unquoted tilde character (‘~’), all of the characters up to the first unquoted slash (or all characters, if there is no unquoted slash) are considered a tilde-prefix. If none of the characters in the tilde-prefix are quoted, the characters in the tilde-prefix following the tilde are treated as a possible login name. If this login name is the null string, the tilde is replaced with the value of the HOME shell variable. If HOME is unset, the home directory of the user executing the shell is substituted instead. Otherwise, the tilde-prefix is replaced with the home directory associated with the specified login name.

If the tilde-prefix is ‘~+’, the value of the shell variable PWD replaces the tilde-prefix. If the tilde-prefix is ‘~-’, the value of the shell variable OLDPWD, if it is set, is substituted.

If the characters following the tilde in the tilde-prefix consist of a number N, optionally prefixed by a ‘+’ or a ‘-’, the tilde-prefix is replaced with the corresponding element from the directory stack, as it would be displayed by the dirs builtin invoked with the characters following tilde in the tilde-prefix as an argument (see The Directory Stack). If the tilde-prefix, sans the tilde, consists of a number without a leading ‘+’ or ‘-’, ‘+’ is assumed.

If the login name is invalid, or the tilde expansion fails, the word is left unchanged.

Each variable assignment is checked for unquoted tilde-prefixes immediately following a ‘:’ or the first ‘=’. In these cases, tilde expansion is also performed. Consequently, one may use file names with tildes in assignments to PATH, MAILPATH, and CDPATH, and the shell assigns the expanded value.

The following table shows how Bash treats unquoted tilde-prefixes:

~
    The value of $HOME
~/foo
    $HOME/foo
~fred/foo
    The subdirectory foo of the home directory of the user fred
~+/foo
    $PWD/foo
~-/foo
    ${OLDPWD-'~-'}/foo
~N
    The string that would be displayed by ‘dirs +N’
~+N
    The string that would be displayed by ‘dirs +N’
~-N
    The string that would be displayed by ‘dirs -N’ 

=== Shell Parameter Expansion ===

The ‘$’ character introduces parameter expansion, command substitution, or arithmetic expansion. The parameter name or symbol to be expanded may be enclosed in braces, which are optional but serve to protect the variable to be expanded from characters immediately following it which could be interpreted as part of the name.

When braces are used, the matching ending brace is the first ‘}’ not escaped by a backslash or within a quoted string, and not within an embedded arithmetic expansion, command substitution, or parameter expansion.

The basic form of parameter expansion is ${parameter}. The value of parameter is substituted. The braces are required when parameter is a positional parameter with more than one digit, or when parameter is followed by a character that is not to be interpreted as part of its name.

If the first character of parameter is an exclamation point, a level of variable indirection is introduced. Bash uses the value of the variable formed from the rest of parameter as the name of the variable; this variable is then expanded and that value is used in the rest of the substitution, rather than the value of parameter itself. This is known as indirect expansion. The exceptions to this are the expansions of ${!prefix{{{*}}}} and ${!name[@]} described below. The exclamation point must immediately follow the left brace in order to introduce indirection.

In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.

When not performing substring expansion, using the form described below, Bash tests for a parameter that is unset or null. Omitting the colon results in a test only for a parameter that is unset. Put another way, if the colon is included, the operator tests for both parameter's existence and that its value is not null; if the colon is omitted, the operator tests only for existence.

${parameter:−word}
    If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.
${parameter:=word}
    If parameter is unset or null, the expansion of word is assigned to parameter. The value of parameter is then substituted. Positional parameters and special parameters may not be assigned to in this way.
${parameter:?word}
    If parameter is null or unset, the expansion of word (or a message to that effect if word is not present) is written to the standard error and the shell, if it is not interactive, exits. Otherwise, the value of parameter is substituted.
${parameter:+word}
    If parameter is null or unset, nothing is substituted, otherwise the expansion of word is substituted.
${parameter:offset}
${parameter:offset:length}
    Expands to up to length characters of parameter starting at the character specified by offset. If length is omitted, expands to the substring of parameter starting at the character specified by offset. length and offset are arithmetic expressions (see Shell Arithmetic). This is referred to as Substring Expansion.

    length must evaluate to a number greater than or equal to zero. If offset evaluates to a number less than zero, the value is used as an offset from the end of the value of parameter. If parameter is ‘@’, the result is length positional parameters beginning at offset. If parameter is an indexed array name subscripted by ‘@’ or ‘{{{*}}}’, the result is the length members of the array beginning with ${parameter[offset]}. A negative offset is taken relative to one greater than the maximum index of the specified array. Substring expansion applied to an associative array produces undefined results.

    Note that a negative offset must be separated from the colon by at least one space to avoid being confused with the ‘:-’ expansion. Substring indexing is zero-based unless the positional parameters are used, in which case the indexing starts at 1 by default. If offset is 0, and the positional parameters are used, $@ is prefixed to the list.
${!prefix{{{*}}} }
${!prefix@}
    Expands to the names of variables whose names begin with prefix, separated by the first character of the IFS special variable. When ‘@’ is used and the expansion appears within double quotes, each variable name expands to a separate word.
${!name[@]}
${!name[{{{*}}}]}
    If name is an array variable, expands to the list of array indices (keys) assigned in name. If name is not an array, expands to 0 if name is set and null otherwise. When ‘@’ is used and the expansion appears within double quotes, each key expands to a separate word.
${#parameter}
    The length in characters of the expanded value of parameter is substituted. If parameter is ‘{{{*}}}’ or ‘@’, the value substituted is the number of positional parameters. If parameter is an array name subscripted by ‘{{{*}}}’ or ‘@’, the value substituted is the number of elements in the array.
${parameter#word}
${parameter##word}
    The word is expanded to produce a pattern just as in filename expansion (see Filename Expansion). If the pattern matches the beginning of the expanded value of parameter, then the result of the expansion is the expanded value of parameter with the shortest matching pattern (the ‘#’ case) or the longest matching pattern (the ‘##’ case) deleted. If parameter is ‘@’ or ‘{{{*}}}’, the pattern removal operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with ‘@’ or ‘{{{*}}}’, the pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.
${parameter%word}
${parameter%%word}
    The word is expanded to produce a pattern just as in filename expansion. If the pattern matches a trailing portion of the expanded value of parameter, then the result of the expansion is the value of parameter with the shortest matching pattern (the ‘%’ case) or the longest matching pattern (the ‘%%’ case) deleted. If parameter is ‘@’ or ‘{{{*}}}’, the pattern removal operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with ‘@’ or ‘{{{*}}}’, the pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.
${parameter/pattern/string}
    The pattern is expanded to produce a pattern just as in filename expansion. Parameter is expanded and the longest match of pattern against its value is replaced with string. If pattern begins with ‘/’, all matches of pattern are replaced with string. Normally only the first match is replaced. If pattern begins with ‘#’, it must match at the beginning of the expanded value of parameter. If pattern begins with ‘%’, it must match at the end of the expanded value of parameter. If string is null, matches of pattern are deleted and the / following pattern may be omitted. If parameter is ‘@’ or ‘{{{*}}}’, the substitution operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with ‘@’ or ‘{{{*}}}’, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.
${parameter^pattern}
${parameter^^pattern}
${parameter,pattern}
${parameter,,pattern}
    This expansion modifies the case of alphabetic characters in parameter. The pattern is expanded to produce a pattern just as in pathname expansion. The ‘^’ operator converts lowercase letters matching pattern to uppercase; the ‘,’ operator converts matching uppercase letters to lowercase. The ‘^^’ and ‘,,’ expansions convert each matched character in the expanded value; the ‘^’ and ‘,’ expansions match and convert only the first character in the expanded value. If pattern is omitted, it is treated like a ‘?’, which matches every character. If parameter is ‘@’ or {{{‘*’}}}, the case modification operation is applied to each positional parameter in turn, and the expansion is the resultant list. If parameter is an array variable subscripted with ‘@’ or ‘{{{*}}}’, the case modification operation is applied to each member of the array in turn, and the expansion is the resultant list. 

=== Command Substitution ===

Command substitution allows the output of a command to replace the command itself. Command substitution occurs when a command is enclosed as follows:

     $(command)

or

     `command`

Bash performs the expansion by executing command and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting. The command substitution $(cat file) can be replaced by the equivalent but faster $(< file).

When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by ‘$’, ‘`’, or ‘\’. The first backquote not preceded by a backslash terminates the command substitution. When using the $(command) form, all characters between the parentheses make up the command; none are treated specially.

Command substitutions may be nested. To nest when using the backquoted form, escape the inner backquotes with backslashes.

If the substitution appears within double quotes, word splitting and filename expansion are not performed on the results. 

=== Arithmetic Expansion ===

Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution of the result. The format for arithmetic expansion is:

     $(( expression ))

The expression is treated as if it were within double quotes, but a double quote inside the parentheses is not treated specially. All tokens in the expression undergo parameter expansion, command substitution, and quote removal. Arithmetic expansions may be nested.

The evaluation is performed according to the rules listed below (see Shell Arithmetic). If the expression is invalid, Bash prints a message indicating failure to the standard error and no substitution occurs. 

=== Process Substitution ===

Process substitution is supported on systems that support named pipes (fifos) or the /dev/fd method of naming open files. It takes the form of

     <(list)

or

     >(list)

The process list is run with its input or output connected to a fifo or some file in /dev/fd. The name of this file is passed as an argument to the current command as the result of the expansion. If the >(list) form is used, writing to the file will provide input for list. If the <(list) form is used, the file passed as an argument should be read to obtain the output of list. Note that no space may appear between the < or > and the left parenthesis, otherwise the construct would be interpreted as a redirection.

When available, process substitution is performed simultaneously with parameter and variable expansion, command substitution, and arithmetic expansion. 

=== Word Splitting ===

The shell scans the results of parameter expansion, command substitution, and arithmetic expansion that did not occur within double quotes for word splitting.

The shell treats each character of $IFS as a delimiter, and splits the results of the other expansions into words on these characters. If IFS is unset, or its value is exactly <space><tab><newline>, the default, then sequences of <space>, <tab>, and <newline> at the beginning and end of the results of the previous expansions are ignored, and any sequence of IFS characters not at the beginning or end serves to delimit words. If IFS has a value other than the default, then sequences of the whitespace characters space and tab are ignored at the beginning and end of the word, as long as the whitespace character is in the value of IFS (an IFS whitespace character). Any character in IFS that is not IFS whitespace, along with any adjacent IFS whitespace characters, delimits a field. A sequence of IFS whitespace characters is also treated as a delimiter. If the value of IFS is null, no word splitting occurs.

Explicit null arguments ("" or '') are retained. Unquoted implicit null arguments, resulting from the expansion of parameters that have no values, are removed. If a parameter with no value is expanded within double quotes, a null argument results and is retained.

Note that if no expansion occurs, no splitting is performed. 

=== Filename Expansion ===

    {{{*}}} Pattern Matching: How the shell matches patterns. 

After word splitting, unless the -f option has been set (see The Set Builtin), Bash scans each word for the characters ‘{{{*}}}’, ‘?’, and ‘[’. If one of these characters appears, then the word is regarded as a pattern, and replaced with an alphabetically sorted list of file names matching the pattern. If no matching file names are found, and the shell option nullglob is disabled, the word is left unchanged. If the nullglob option is set, and no matches are found, the word is removed. If the failglob shell option is set, and no matches are found, an error message is printed and the command is not executed. If the shell option nocaseglob is enabled, the match is performed without regard to the case of alphabetic characters.

When a pattern is used for filename generation, the character ‘.’ at the start of a filename or immediately following a slash must be matched explicitly, unless the shell option dotglob is set. When matching a file name, the slash character must always be matched explicitly. In other cases, the ‘.’ character is not treated specially.

See the description of shopt in The Shopt Builtin, for a description of the nocaseglob, nullglob, failglob, and dotglob options.

The GLOBIGNORE shell variable may be used to restrict the set of filenames matching a pattern. If GLOBIGNORE is set, each matching filename that also matches one of the patterns in GLOBIGNORE is removed from the list of matches. The filenames . and .. are always ignored when GLOBIGNORE is set and not null. However, setting GLOBIGNORE to a non-null value has the effect of enabling the dotglob shell option, so all other filenames beginning with a ‘.’ will match. To get the old behavior of ignoring filenames beginning with a ‘.’, make ‘.{{{*}}}’ one of the patterns in GLOBIGNORE. The dotglob option is disabled when GLOBIGNORE is unset. 

=== Quote Removal ===

After the preceding expansions, all unquoted occurrences of the characters ‘\’, ‘'’, and ‘"’ that did not result from one of the above expansions are removed. 

=== Redirections ===

Before a command is executed, its input and output may be redirected using a special notation interpreted by the shell. Redirection may also be used to open and close files for the current shell execution environment. The following redirection operators may precede or appear anywhere within a simple command or may follow a command. Redirections are processed in the order they appear, from left to right.

In the following descriptions, if the file descriptor number is omitted, and the first character of the redirection operator is ‘<’, the redirection refers to the standard input (file descriptor 0). If the first character of the redirection operator is ‘>’, the redirection refers to the standard output (file descriptor 1).

The word following the redirection operator in the following descriptions, unless otherwise noted, is subjected to brace expansion, tilde expansion, parameter expansion, command substitution, arithmetic expansion, quote removal, filename expansion, and word splitting. If it expands to more than one word, Bash reports an error.

Note that the order of redirections is significant. For example, the command

     ls > dirlist 2>&1

directs both standard output (file descriptor 1) and standard error (file descriptor 2) to the file dirlist, while the command

     ls 2>&1 > dirlist

directs only the standard output to file dirlist, because the standard error was made a copy of the standard output before the standard output was redirected to dirlist.

Bash handles several filenames specially when they are used in redirections, as described in the following table:

/dev/fd/fd
    If fd is a valid integer, file descriptor fd is duplicated.
/dev/stdin
    File descriptor 0 is duplicated.
/dev/stdout
    File descriptor 1 is duplicated.
/dev/stderr
    File descriptor 2 is duplicated.
/dev/tcp/host/port
    If host is a valid hostname or Internet address, and port is an integer port number or service name, Bash attempts to open a TCP connection to the corresponding socket.
/dev/udp/host/port
    If host is a valid hostname or Internet address, and port is an integer port number or service name, Bash attempts to open a UDP connection to the corresponding socket. 

A failure to open or create a file causes the redirection to fail.

Redirections using file descriptors greater than 9 should be used with care, as they may conflict with file descriptors the shell uses internally.

==== Redirecting Input ====

Redirection of input causes the file whose name results from the expansion of word to be opened for reading on file descriptor n, or the standard input (file descriptor 0) if n is not specified.

The general format for redirecting input is:

     [n]<word

==== Redirecting Output ====

Redirection of output causes the file whose name results from the expansion of word to be opened for writing on file descriptor n, or the standard output (file descriptor 1) if n is not specified. If the file does not exist it is created; if it does exist it is truncated to zero size.

The general format for redirecting output is:

     [n]>[|]word

If the redirection operator is ‘>’, and the noclobber option to the set builtin has been enabled, the redirection will fail if the file whose name results from the expansion of word exists and is a regular file. If the redirection operator is ‘>|’, or the redirection operator is ‘>’ and the noclobber option is not enabled, the redirection is attempted even if the file named by word exists.
3.6.3 Appending Redirected Output

Redirection of output in this fashion causes the file whose name results from the expansion of word to be opened for appending on file descriptor n, or the standard output (file descriptor 1) if n is not specified. If the file does not exist it is created.

The general format for appending output is:

     [n]>>word

====  Redirecting Standard Output and Standard Error ====

This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be redirected to the file whose name is the expansion of word.

There are two formats for redirecting standard output and standard error:

     &>word

and

     >&word

Of the two forms, the first is preferred. This is semantically equivalent to

     >word 2>&1

==== Appending Standard Output and Standard Error ====

This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be appended to the file whose name is the expansion of word.

The format for appending standard output and standard error is:

     &>>word

This is semantically equivalent to

     >>word 2>&1

==== Here Documents ====

This type of redirection instructs the shell to read input from the current source until a line containing only word (with no trailing blanks) is seen. All of the lines read up to that point are then used as the standard input for a command.

The format of here-documents is:

     <<[−]word
             here-document
     delimiter

No parameter expansion, command substitution, arithmetic expansion, or filename expansion is performed on word. If any characters in word are quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded. If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. In the latter case, the character sequence \newline is ignored, and ‘\’ must be used to quote the characters ‘\’, ‘$’, and ‘`’.

If the redirection operator is ‘<<-’, then all leading tab characters are stripped from input lines and the line containing delimiter. This allows here-documents within shell scripts to be indented in a natural fashion.

==== Here Strings ====

A variant of here documents, the format is:

     <<< word

The word is expanded and supplied to the command on its standard input.

==== Duplicating File Descriptors ====

The redirection operator

     [n]<&word

is used to duplicate input file descriptors. If word expands to one or more digits, the file descriptor denoted by n is made to be a copy of that file descriptor. If the digits in word do not specify a file descriptor open for input, a redirection error occurs. If word evaluates to ‘-’, file descriptor n is closed. If n is not specified, the standard input (file descriptor 0) is used.

The operator

     [n]>&word

is used similarly to duplicate output file descriptors. If n is not specified, the standard output (file descriptor 1) is used. If the digits in word do not specify a file descriptor open for output, a redirection error occurs. As a special case, if n is omitted, and word does not expand to one or more digits, the standard output and standard error are redirected as described previously.

==== Moving File Descriptors ====

The redirection operator

     [n]<&digit-

moves the file descriptor digit to file descriptor n, or the standard input (file descriptor 0) if n is not specified. digit is closed after being duplicated to n.

Similarly, the redirection operator

     [n]>&digit-

moves the file descriptor digit to file descriptor n, or the standard output (file descriptor 1) if n is not specified.

==== Opening File Descriptors for Reading and Writing ====

The redirection operator

     [n]<>word

causes the file whose name is the expansion of word to be opened for both reading and writing on file descriptor n, or on file descriptor 0 if n is not specified. If the file does not exist, it is created. 

=== Executing Commands ===

    * Simple Command Expansion: How Bash expands simple commands before executing them.
    * Command Search and Execution: How Bash finds commands and runs them.
    * Command Execution Environment: The environment in which Bash executes commands that are not shell builtins.
    * Environment: The environment given to a command.
    * Exit Status: The status returned by commands and how Bash interprets it.
    * Signals: What happens when Bash or a command it runs receives a signal. 

==== Simple Command Expansion ====

When a simple command is executed, the shell performs the following expansions, assignments, and redirections, from left to right.

   1. The words that the parser has marked as variable assignments (those preceding the command name) and redirections are saved for later processing.
   2. The words that are not variable assignments or redirections are expanded (see Shell Expansions). If any words remain after expansion, the first word is taken to be the name of the command and the remaining words are the arguments.
   3. Redirections are performed as described above (see Redirections).
   4. The text after the ‘=’ in each variable assignment undergoes tilde expansion, parameter expansion, command substitution, arithmetic expansion, and quote removal before being assigned to the variable. 

If no command name results, the variable assignments affect the current shell environment. Otherwise, the variables are added to the environment of the executed command and do not affect the current shell environment. If any of the assignments attempts to assign a value to a readonly variable, an error occurs, and the command exits with a non-zero status.

If no command name results, redirections are performed, but do not affect the current shell environment. A redirection error causes the command to exit with a non-zero status.

If there is a command name left after expansion, execution proceeds as described below. Otherwise, the command exits. If one of the expansions contained a command substitution, the exit status of the command is the exit status of the last command substitution performed. If there were no command substitutions, the command exits with a status of zero. 

==== Command Search and Execution ====

After a command has been split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.

   1. If the command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, that function is invoked as described in Shell Functions.
   2. If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.
   3. If the name is neither a shell function nor a builtin, and contains no slashes, Bash searches each element of $PATH for a directory containing an executable file by that name. Bash uses a hash table to remember the full pathnames of executable files to avoid multiple PATH searches (see the description of hash in Bourne Shell Builtins). A full search of the directories in $PATH is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named command_not_found_handle. If that function exists, it is invoked with the original command and the original command's arguments as its arguments, and the function's exit status becomes the exit status of the shell. If that function is not defined, the shell prints an error message and returns an exit status of 127.
   4. If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments supplied, if any.
   5. If this execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell script and the shell executes it as described in Shell Scripts.
   6. If the command was not begun asynchronously, the shell waits for the command to complete and collects its exit status. 

==== Command Execution Environment ====

The shell has an execution environment, which consists of the following:

    * open files inherited by the shell at invocation, as modified by redirections supplied to the exec builtin
    * the current working directory as set by cd, pushd, or popd, or inherited by the shell at invocation
    * the file creation mode mask as set by umask or inherited from the shell's parent
    * current traps set by trap
    * shell parameters that are set by variable assignment or with set or inherited from the shell's parent in the environment
    * shell functions defined during execution or inherited from the shell's parent in the environment
    * options enabled at invocation (either by default or with command-line arguments) or by set
    * options enabled by shopt (see The Shopt Builtin)
    * shell aliases defined with alias (see Aliases)
    * various process ids, including those of background jobs (see Lists), the value of $$, and the value of $PPID 

When a simple command other than a builtin or shell function is to be executed, it is invoked in a separate execution environment that consists of the following. Unless otherwise noted, the values are inherited from the shell.

    * the shell's open files, plus any modifications and additions specified by redirections to the command
    * the current working directory
    * the file creation mode mask
    * shell variables and functions marked for export, along with variables exported for the command, passed in the environment (see Environment)
    * traps caught by the shell are reset to the values inherited from the shell's parent, and traps ignored by the shell are ignored 

A command invoked in this separate environment cannot affect the shell's execution environment.

Command substitution, commands grouped with parentheses, and asynchronous commands are invoked in a subshell environment that is a duplicate of the shell environment, except that traps caught by the shell are reset to the values that the shell inherited from its parent at invocation. Builtin commands that are invoked as part of a pipeline are also executed in a subshell environment. Changes made to the subshell environment cannot affect the shell's execution environment.

Subshells spawned to execute command substitutions inherit the value of the -e option from the parent shell. When not in posix mode, Bash clears the -e option in such subshells.

If a command is followed by a ‘&’ and job control is not active, the default standard input for the command is the empty file /dev/null. Otherwise, the invoked command inherits the file descriptors of the calling shell as modified by redirections. 

==== Environment ====

When a program is invoked it is given an array of strings called the environment. This is a list of name-value pairs, of the form name=value.

Bash provides several ways to manipulate the environment. On invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for export to child processes. Executed commands inherit the environment. The export and ‘declare -x’ commands allow parameters and functions to be added to and deleted from the environment. If the value of a parameter in the environment is modified, the new value becomes part of the environment, replacing the old. The environment inherited by any executed command consists of the shell's initial environment, whose values may be modified in the shell, less any pairs removed by the unset and ‘export -n’ commands, plus any additions via the export and ‘declare -x’ commands.

The environment for any simple command or function may be augmented temporarily by prefixing it with parameter assignments, as described in Shell Parameters. These assignment statements affect only the environment seen by that command.

If the -k option is set (see The Set Builtin), then all parameter assignments are placed in the environment for a command, not just those that precede the command name.

When Bash invokes an external command, the variable ‘$_’ is set to the full path name of the command and passed to that command in its environment. 

==== Exit Status ====

The exit status of an executed command is the value returned by the waitpid system call or equivalent function. Exit statuses fall between 0 and 255, though, as explained below, the shell may use values above 125 specially. Exit statuses from shell builtins and compound commands are also limited to this range. Under certain circumstances, the shell will use special values to indicate specific failure modes.

For the shell's purposes, a command which exits with a zero exit status has succeeded. A non-zero exit status indicates failure. This seemingly counter-intuitive scheme is used so there is one well-defined way to indicate success and a variety of ways to indicate various failure modes. When a command terminates on a fatal signal whose number is N, Bash uses the value 128+N as the exit status.

If a command is not found, the child process created to execute it returns a status of 127. If a command is found but is not executable, the return status is 126.

If a command fails because of an error during expansion or redirection, the exit status is greater than zero.

The exit status is used by the Bash conditional commands (see Conditional Constructs) and some of the list constructs (see Lists).

All of the Bash builtins return an exit status of zero if they succeed and a non-zero status on failure, so they may be used by the conditional and list constructs. All builtins return an exit status of 2 to indicate incorrect usage. 

==== Signals ====

When Bash is interactive, in the absence of any traps, it ignores SIGTERM (so that ‘kill 0’ does not kill an interactive shell), and SIGINT is caught and handled (so that the wait builtin is interruptible). When Bash receives a SIGINT, it breaks out of any executing loops. In all cases, Bash ignores SIGQUIT. If job control is in effect (see Job Control), Bash ignores SIGTTIN, SIGTTOU, and SIGTSTP.

Non-builtin commands started by Bash have signal handlers set to the values inherited by the shell from its parent. When job control is not in effect, asynchronous commands ignore SIGINT and SIGQUIT in addition to these inherited handlers. Commands run as a result of command substitution ignore the keyboard-generated job control signals SIGTTIN, SIGTTOU, and SIGTSTP.

The shell exits by default upon receipt of a SIGHUP. Before exiting, an interactive shell resends the SIGHUP to all jobs, running or stopped. Stopped jobs are sent SIGCONT to ensure that they receive the SIGHUP. To prevent the shell from sending the SIGHUP signal to a particular job, it should be removed from the jobs table with the disown builtin (see Job Control Builtins) or marked to not receive SIGHUP using disown -h.

If the huponexit shell option has been set with shopt (see The Shopt Builtin), Bash sends a SIGHUP to all jobs when an interactive login shell exits.

If Bash is waiting for a command to complete and receives a signal for which a trap has been set, the trap will not be executed until the command completes. When Bash is waiting for an asynchronous command via the wait builtin, the reception of a signal for which a trap has been set will cause the wait builtin to return immediately with an exit status greater than 128, immediately after which the trap is executed. 

=== Shell Scripts ===

A shell script is a text file containing shell commands. When such a file is used as the first non-option argument when invoking Bash, and neither the -c nor -s option is supplied (see Invoking Bash), Bash reads and executes commands from the file, then exits. This mode of operation creates a non-interactive shell. The shell first searches for the file in the current directory, and looks in the directories in $PATH if not found there.

When Bash runs a shell script, it sets the special parameter 0 to the name of the file, rather than the name of the shell, and the positional parameters are set to the remaining arguments, if any are given. If no additional arguments are supplied, the positional parameters are unset.

A shell script may be made executable by using the chmod command to turn on the execute bit. When Bash finds such a file while searching the $PATH for a command, it spawns a subshell to execute it. In other words, executing

     filename arguments

is equivalent to executing

     bash filename arguments

if filename is an executable shell script. This subshell reinitializes itself, so that the effect is as if a new shell had been invoked to interpret the script, with the exception that the locations of commands remembered by the parent (see the description of hash in Bourne Shell Builtins) are retained by the child.

Most versions of Unix make this a part of the operating system's command execution mechanism. If the first line of a script begins with the two characters ‘#!’, the remainder of the line specifies an interpreter for the program. Thus, you can specify Bash, awk, Perl, or some other interpreter and write the rest of the script file in that language.

The arguments to the interpreter consist of a single optional argument following the interpreter name on the first line of the script file, followed by the name of the script file, followed by the rest of the arguments. Bash will perform this action on operating systems that do not handle it themselves. Note that some older versions of Unix limit the interpreter name and argument to a maximum of 32 characters.

Bash scripts often begin with #! /bin/bash (assuming that Bash has been installed in /bin), since this ensures that Bash will be used to interpret the script, even if it is executed under another shell. 

== Shell Builtin Commands ==

    * Bourne Shell Builtins: Builtin commands inherited from the Bourne Shell.
    * Bash Builtins: Table of builtins specific to Bash.
    * Modifying Shell Behavior: Builtins to modify shell attributes and optional behavior.
    * Special Builtins: Builtin commands classified specially by POSIX. 

Builtin commands are contained within the shell itself. When the name of a builtin command is used as the first word of a simple command (see Simple Commands), the shell executes the command directly, without invoking another program. Builtin commands are necessary to implement functionality impossible or inconvenient to obtain with separate utilities.

This section briefly describes the builtins which Bash inherits from the Bourne Shell, as well as the builtin commands which are unique to or have been extended in Bash.

Several builtin commands are described in other chapters: builtin commands which provide the Bash interface to the job control facilities (see Job Control Builtins), the directory stack (see Directory Stack Builtins), the command history (see Bash History Builtins), and the programmable completion facilities (see Programmable Completion Builtins).

Many of the builtins have been extended by posix or Bash.

Unless otherwise noted, each builtin command documented as accepting options preceded by ‘-’ accepts ‘--’ to signify the end of the options. For example, the :, true, false, and test builtins do not accept options. 

=== Bourne Shell Builtins ===

The following shell builtin commands are inherited from the Bourne Shell. These commands are implemented as specified by the posix standard.

: (a colon)

              : [arguments]

    Do nothing beyond expanding arguments and performing redirections. The return status is zero.
. (a period)

              . filename [arguments]

    Read and execute commands from the filename argument in the current shell context. If filename does not contain a slash, the PATH variable is used to find filename. When Bash is not in posix mode, the current directory is searched if filename is not found in $PATH. If any arguments are supplied, they become the positional parameters when filename is executed. Otherwise the positional parameters are unchanged. The return status is the exit status of the last command executed, or zero if no commands are executed. If filename is not found, or cannot be read, the return status is non-zero. This builtin is equivalent to source.
break

              break [n]

    Exit from a for, while, until, or select loop. If n is supplied, the nth enclosing loop is exited. n must be greater than or equal to 1. The return status is zero unless n is not greater than or equal to 1.
cd

              cd [-L|-P] [directory]

    Change the current working directory to directory. If directory is not given, the value of the HOME shell variable is used. If the shell variable CDPATH exists, it is used as a search path. If directory begins with a slash, CDPATH is not used.

    The -P option means to not follow symbolic links; symbolic links are followed by default or with the -L option. If directory is ‘-’, it is equivalent to $OLDPWD.

    If a non-empty directory name from CDPATH is used, or if ‘-’ is the first argument, and the directory change is successful, the absolute pathname of the new working directory is written to the standard output.

    The return status is zero if the directory is successfully changed, non-zero otherwise.
continue

              continue [n]

    Resume the next iteration of an enclosing for, while, until, or select loop. If n is supplied, the execution of the nth enclosing loop is resumed. n must be greater than or equal to 1. The return status is zero unless n is not greater than or equal to 1.
eval

              eval [arguments]

    The arguments are concatenated together into a single command, which is then read and executed, and its exit status returned as the exit status of eval. If there are no arguments or only empty arguments, the return status is zero.
exec

              exec [-cl] [-a name] [command [arguments]]

    If command is supplied, it replaces the shell without creating a new process. If the -l option is supplied, the shell places a dash at the beginning of the zeroth argument passed to command. This is what the login program does. The -c option causes command to be executed with an empty environment. If -a is supplied, the shell passes name as the zeroth argument to command. If no command is specified, redirections may be used to affect the current shell environment. If there are no redirection errors, the return status is zero; otherwise the return status is non-zero.
exit

              exit [n]

    Exit the shell, returning a status of n to the shell's parent. If n is omitted, the exit status is that of the last command executed. Any trap on EXIT is executed before the shell terminates.
export

              export [-fn] [-p] [name[=value]]

    Mark each name to be passed to child processes in the environment. If the -f option is supplied, the names refer to shell functions; otherwise the names refer to shell variables. The -n option means to no longer mark each name for export. If no names are supplied, or if the -p option is given, a list of exported names is displayed. The -p option displays output in a form that may be reused as input. If a variable name is followed by =value, the value of the variable is set to value.

    The return status is zero unless an invalid option is supplied, one of the names is not a valid shell variable name, or -f is supplied with a name that is not a shell function.
getopts

              getopts optstring name [args]

    getopts is used by shell scripts to parse positional parameters. optstring contains the option characters to be recognized; if a character is followed by a colon, the option is expected to have an argument, which should be separated from it by white space. The colon (‘:’) and question mark (‘?’) may not be used as option characters. Each time it is invoked, getopts places the next option in the shell variable name, initializing name if it does not exist, and the index of the next argument to be processed into the variable OPTIND. OPTIND is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument, getopts places that argument into the variable OPTARG. The shell does not reset OPTIND automatically; it must be manually reset between multiple calls to getopts within the same shell invocation if a new set of parameters is to be used.

    When the end of options is encountered, getopts exits with a return value greater than zero. OPTIND is set to the index of the first non-option argument, and name is set to ‘?’.

    getopts normally parses the positional parameters, but if more arguments are given in args, getopts parses those instead.

    getopts can report errors in two ways. If the first character of optstring is a colon, silent error reporting is used. In normal operation diagnostic messages are printed when invalid options or missing option arguments are encountered. If the variable OPTERR is set to 0, no error messages will be displayed, even if the first character of optstring is not a colon.

    If an invalid option is seen, getopts places ‘?’ into name and, if not silent, prints an error message and unsets OPTARG. If getopts is silent, the option character found is placed in OPTARG and no diagnostic message is printed.

    If a required argument is not found, and getopts is not silent, a question mark (‘?’) is placed in name, OPTARG is unset, and a diagnostic message is printed. If getopts is silent, then a colon (‘:’) is placed in name and OPTARG is set to the option character found.
hash

              hash [-r] [-p filename] [-dt] [name]

    Remember the full pathnames of commands specified as name arguments, so they need not be searched for on subsequent invocations. The commands are found by searching through the directories listed in $PATH. The -p option inhibits the path search, and filename is used as the location of name. The -r option causes the shell to forget all remembered locations. The -d option causes the shell to forget the remembered location of each name. If the -t option is supplied, the full pathname to which each name corresponds is printed. If multiple name arguments are supplied with -t the name is printed before the hashed full pathname. The -l option causes output to be displayed in a format that may be reused as input. If no arguments are given, or if only -l is supplied, information about remembered commands is printed. The return status is zero unless a name is not found or an invalid option is supplied.
pwd

              pwd [-LP]

    Print the absolute pathname of the current working directory. If the -P option is supplied, the pathname printed will not contain symbolic links. If the -L option is supplied, the pathname printed may contain symbolic links. The return status is zero unless an error is encountered while determining the name of the current directory or an invalid option is supplied.
readonly

              readonly [-aApf] [name[=value]] ...

    Mark each name as readonly. The values of these names may not be changed by subsequent assignment. If the -f option is supplied, each name refers to a shell function. The -a option means each name refers to an indexed array variable; the -A option means each name refers to an associative array variable. If no name arguments are given, or if the -p option is supplied, a list of all readonly names is printed. The -p option causes output to be displayed in a format that may be reused as input. If a variable name is followed by =value, the value of the variable is set to value. The return status is zero unless an invalid option is supplied, one of the name arguments is not a valid shell variable or function name, or the -f option is supplied with a name that is not a shell function.
return

              return [n]

    Cause a shell function to exit with the return value n. If n is not supplied, the return value is the exit status of the last command executed in the function. This may also be used to terminate execution of a script being executed with the . (or source) builtin, returning either n or the exit status of the last command executed within the script as the exit status of the script. Any command associated with the RETURN trap is executed before execution resumes after the function or script. The return status is non-zero if return is used outside a function and not during the execution of a script by . or source.
shift

              shift [n]

    Shift the positional parameters to the left by n. The positional parameters from n+1 ... $# are renamed to $1 ... $#-n. Parameters represented by the numbers $# to $#-n+1 are unset. n must be a non-negative number less than or equal to $#. If n is zero or greater than $#, the positional parameters are not changed. If n is not supplied, it is assumed to be 1. The return status is zero unless n is greater than $# or less than zero, non-zero otherwise.
test
[
    Evaluate a conditional expression expr. Each operator and operand must be a separate argument. Expressions are composed of the primaries described below in Bash Conditional Expressions. test does not accept any options, nor does it accept and ignore an argument of -- as signifying the end of options.

    When the [ form is used, the last argument to the command must be a ].

    Expressions may be combined using the following operators, listed in decreasing order of precedence. The evaluation depends on the number of arguments; see below.

    ! expr
        True if expr is false.
    ( expr )
        Returns the value of expr. This may be used to override the normal precedence of operators.
    expr1 -a expr2
        True if both expr1 and expr2 are true.
    expr1 -o expr2
        True if either expr1 or expr2 is true. 

    The test and [ builtins evaluate conditional expressions using a set of rules based on the number of arguments.

    0 arguments
        The expression is false.
    1 argument
        The expression is true if and only if the argument is not null.
    2 arguments
        If the first argument is ‘!’, the expression is true if and only if the second argument is null. If the first argument is one of the unary conditional operators (see Bash Conditional Expressions), the expression is true if the unary test is true. If the first argument is not a valid unary operator, the expression is false.
    3 arguments
        If the second argument is one of the binary conditional operators (see Bash Conditional Expressions), the result of the expression is the result of the binary test using the first and third arguments as operands. The ‘-a’ and ‘-o’ operators are considered binary operators when there are three arguments. If the first argument is ‘!’, the value is the negation of the two-argument test using the second and third arguments. If the first argument is exactly ‘(’ and the third argument is exactly ‘)’, the result is the one-argument test of the second argument. Otherwise, the expression is false.
    4 arguments
        If the first argument is ‘!’, the result is the negation of the three-argument expression composed of the remaining arguments. Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.
    5 or more arguments
        The expression is parsed and evaluated according to precedence using the rules listed above. 


times

              times

    Print out the user and system times used by the shell and its children. The return status is zero.
trap

              trap [-lp] [arg] [sigspec ...]

    The commands in arg are to be read and executed when the shell receives signal sigspec. If arg is absent (and there is a single sigspec) or equal to ‘-’, each specified signal's disposition is reset to the value it had when the shell was started. If arg is the null string, then the signal specified by each sigspec is ignored by the shell and commands it invokes. If arg is not present and -p has been supplied, the shell displays the trap commands associated with each sigspec. If no arguments are supplied, or only -p is given, trap prints the list of commands associated with each signal number in a form that may be reused as shell input. The -l option causes the shell to print a list of signal names and their corresponding numbers. Each sigspec is either a signal name or a signal number. Signal names are case insensitive and the SIG prefix is optional. If a sigspec is 0 or EXIT, arg is executed when the shell exits. If a sigspec is DEBUG, the command arg is executed before every simple command, for command, case command, select command, every arithmetic for command, and before the first command executes in a shell function. Refer to the description of the extglob option to the shopt builtin (see The Shopt Builtin) for details of its effect on the DEBUG trap. If a sigspec is ERR, the command arg is executed whenever a simple command has a non-zero exit status, subject to the following conditions. The ERR trap is not executed if the failed command is part of the command list immediately following an until or while keyword, part of the test following the if or elif reserved words, part of a command executed in a && or || list, or if the command's return status is being inverted using !. These are the same conditions obeyed by the errexit option. If a sigspec is RETURN, the command arg is executed each time a shell function or a script executed with the . or source builtins finishes executing.

    Signals ignored upon entry to the shell cannot be trapped or reset. Trapped signals that are not being ignored are reset to their original values in a child process when it is created.

    The return status is zero unless a sigspec does not specify a valid signal.
umask

              umask [-p] [-S] [mode]

    Set the shell process's file creation mask to mode. If mode begins with a digit, it is interpreted as an octal number; if not, it is interpreted as a symbolic mode mask similar to that accepted by the chmod command. If mode is omitted, the current value of the mask is printed. If the -S option is supplied without a mode argument, the mask is printed in a symbolic format. If the -p option is supplied, and mode is omitted, the output is in a form that may be reused as input. The return status is zero if the mode is successfully changed or if no mode argument is supplied, and non-zero otherwise.

    Note that when the mode is interpreted as an octal number, each number of the umask is subtracted from 7. Thus, a umask of 022 results in permissions of 755.
unset

              unset [-fv] [name]

    Each variable or function name is removed. If no options are supplied, or the -v option is given, each name refers to a shell variable. If the -f option is given, the names refer to shell functions, and the function definition is removed. Readonly variables and functions may not be unset. The return status is zero unless a name is readonly. 

=== Bash Builtin Commands ===

This section describes builtin commands which are unique to or have been extended in Bash. Some of these commands are specified in the posix standard.

alias

              alias [-p] [name[=value] ...]

    Without arguments or with the -p option, alias prints the list of aliases on the standard output in a form that allows them to be reused as input. If arguments are supplied, an alias is defined for each name whose value is given. If no value is given, the name and value of the alias is printed. Aliases are described in Aliases.
bind

              bind [-m keymap] [-lpsvPSV]
              bind [-m keymap] [-q function] [-u function] [-r keyseq]
              bind [-m keymap] -f filename
              bind [-m keymap] -x keyseq:shell-command
              bind [-m keymap] keyseq:function-name
              bind readline-command

    Display current Readline (see Command Line Editing) key and function bindings, bind a key sequence to a Readline function or macro, or set a Readline variable. Each non-option argument is a command as it would appear in a Readline initialization file (see Readline Init File), but each binding or command must be passed as a separate argument; e.g., ‘"\C-x\C-r":re-read-init-file’.

    Options, if supplied, have the following meanings:

    -m keymap
        Use keymap as the keymap to be affected by the subsequent bindings. Acceptable keymap names are emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, and vi-insert. vi is equivalent to vi-command; emacs is equivalent to emacs-standard.
    -l
        List the names of all Readline functions.
    -p
        Display Readline function names and bindings in such a way that they can be used as input or in a Readline initialization file.
    -P
        List current Readline function names and bindings.
    -v
        Display Readline variable names and values in such a way that they can be used as input or in a Readline initialization file.
    -V
        List current Readline variable names and values.
    -s
        Display Readline key sequences bound to macros and the strings they output in such a way that they can be used as input or in a Readline initialization file.
    -S
        Display Readline key sequences bound to macros and the strings they output.
    -f filename
        Read key bindings from filename.
    -q function
        Query about which keys invoke the named function.
    -u function
        Unbind all keys bound to the named function.
    -r keyseq
        Remove any current binding for keyseq.
    -x keyseq:shell-command
        Cause shell-command to be executed whenever keyseq is entered. When shell-command is executed, the shell sets the READLINE_LINE variable to the contents of the Readline line buffer and the READLINE_POINT variable to the current location of the insertion point. If the executed command changes the value of READLINE_LINE or READLINE_POINT, those new values will be reflected in the editing state. 

    The return status is zero unless an invalid option is supplied or an error occurs.
builtin

              builtin [shell-builtin [args]]

    Run a shell builtin, passing it args, and return its exit status. This is useful when defining a shell function with the same name as a shell builtin, retaining the functionality of the builtin within the function. The return status is non-zero if shell-builtin is not a shell builtin command.
caller

              caller [expr]

    Returns the context of any active subroutine call (a shell function or a script executed with the . or source builtins).

    Without expr, caller displays the line number and source filename of the current subroutine call. If a non-negative integer is supplied as expr, caller displays the line number, subroutine name, and source file corresponding to that position in the current execution call stack. This extra information may be used, for example, to print a stack trace. The current frame is frame 0.

    The return value is 0 unless the shell is not executing a subroutine call or expr does not correspond to a valid position in the call stack.
command

              command [-pVv] command [arguments ...]

    Runs command with arguments ignoring any shell function named command. Only shell builtin commands or commands found by searching the PATH are executed. If there is a shell function named ls, running ‘command ls’ within the function will execute the external command ls instead of calling the function recursively. The -p option means to use a default value for PATH that is guaranteed to find all of the standard utilities. The return status in this case is 127 if command cannot be found or an error occurred, and the exit status of command otherwise.

    If either the -V or -v option is supplied, a description of command is printed. The -v option causes a single word indicating the command or file name used to invoke command to be displayed; the -V option produces a more verbose description. In this case, the return status is zero if command is found, and non-zero if not.
declare

              declare [-aAfFilrtux] [-p] [name[=value] ...]

    Declare variables and give them attributes. If no names are given, then display the values of variables instead.

    The -p option will display the attributes and values of each name. When -p is used with name arguments, additional options are ignored.

    When -p is supplied without name arguments, declare will display the attributes and values of all variables having the attributes specified by the additional options. If no other options are supplied with -p, declare will display the attributes and values of all shell variables. The -f option will restrict the display to shell functions.

    The -F option inhibits the display of function definitions; only the function name and attributes are printed. If the extdebug shell option is enabled using shopt (see The Shopt Builtin), the source file name and line number where the function is defined are displayed as well. -F implies -f. The following options can be used to restrict output to variables with the specified attributes or to give variables attributes:

    -a
        Each name is an indexed array variable (see Arrays).
    -A
        Each name is an associative array variable (see Arrays).
    -f
        Use function names only.
    -i
        The variable is to be treated as an integer; arithmetic evaluation (see Shell Arithmetic) is performed when the variable is assigned a value.
    -l
        When the variable is assigned a value, all upper-case characters are converted to lower-case. The upper-case attribute is disabled.
    -r
        Make names readonly. These names cannot then be assigned values by subsequent assignment statements or unset.
    -t
        Give each name the trace attribute. Traced functions inherit the DEBUG and RETURN traps from the calling shell. The trace attribute has no special meaning for variables.
    -u
        When the variable is assigned a value, all lower-case characters are converted to upper-case. The lower-case attribute is disabled.
    -x
        Mark each name for export to subsequent commands via the environment. 

    Using ‘+’ instead of ‘-’ turns off the attribute instead, with the exceptions that ‘+a’ may not be used to destroy an array variable and ‘+r’ will not remove the readonly attribute. When used in a function, declare makes each name local, as with the local command. If a variable name is followed by =value, the value of the variable is set to value.

    The return status is zero unless an invalid option is encountered, an attempt is made to define a function using ‘-f foo=bar’, an attempt is made to assign a value to a readonly variable, an attempt is made to assign a value to an array variable without using the compound assignment syntax (see Arrays), one of the names is not a valid shell variable name, an attempt is made to turn off readonly status for a readonly variable, an attempt is made to turn off array status for an array variable, or an attempt is made to display a non-existent function with -f.
echo

              echo [-neE] [arg ...]

    Output the args, separated by spaces, terminated with a newline. The return status is always 0. If -n is specified, the trailing newline is suppressed. If the -e option is given, interpretation of the following backslash-escaped characters is enabled. The -E option disables the interpretation of these escape characters, even on systems where they are interpreted by default. The xpg_echo shell option may be used to dynamically determine whether or not echo expands these escape characters by default. echo does not interpret -- to mean the end of options.

    echo interprets the following escape sequences:

    \a
        alert (bell)
    \b
        backspace
    \c
        suppress further output
    \e
        escape
    \f
        form feed
    \n
        new line
    \r
        carriage return
    \t
        horizontal tab
    \v
        vertical tab
    \\
        backslash
    \0nnn
        the eight-bit character whose value is the octal value nnn (zero to three octal digits)
    \xHH
        the eight-bit character whose value is the hexadecimal value HH (one or two hex digits) 


enable

              enable [-a] [-dnps] [-f filename] [name ...]

    Enable and disable builtin shell commands. Disabling a builtin allows a disk command which has the same name as a shell builtin to be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands. If -n is used, the names become disabled. Otherwise names are enabled. For example, to use the test binary found via $PATH instead of the shell builtin version, type ‘enable -n test’.

    If the -p option is supplied, or no name arguments appear, a list of shell builtins is printed. With no other arguments, the list consists of all enabled shell builtins. The -a option means to list each builtin with an indication of whether or not it is enabled.

    The -f option means to load the new builtin command name from shared object filename, on systems that support dynamic loading. The -d option will delete a builtin loaded with -f.

    If there are no options, a list of the shell builtins is displayed. The -s option restricts enable to the posix special builtins. If -s is used with -f, the new builtin becomes a special builtin (see Special Builtins).

    The return status is zero unless a name is not a shell builtin or there is an error loading a new builtin from a shared object.
help

              help [-dms] [pattern]

    Display helpful information about builtin commands. If pattern is specified, help gives detailed help on all commands matching pattern, otherwise a list of the builtins is printed.

    Options, if supplied, have the following meanings:

    -d
        Display a short description of each pattern
    -m
        Display the description of each pattern in a manpage-like format
    -s
        Display only a short usage synopsis for each pattern 

    The return status is zero unless no command matches pattern.
let

              let expression [expression]

    The let builtin allows arithmetic to be performed on shell variables. Each expression is evaluated according to the rules given below in Shell Arithmetic. If the last expression evaluates to 0, let returns 1; otherwise 0 is returned.
local

              local [option] name[=value] ...

    For each argument, a local variable named name is created, and assigned value. The option can be any of the options accepted by declare. local can only be used within a function; it makes the variable name have a visible scope restricted to that function and its children. The return status is zero unless local is used outside a function, an invalid name is supplied, or name is a readonly variable.
logout

              logout [n]

    Exit a login shell, returning a status of n to the shell's parent.
mapfile

              mapfile [-n count] [-O origin] [-s count] [-t] [-u fd] [
              -C callback] [-c quantum] [array]

    Read lines from the standard input into array variable array, or from file descriptor fd if the -u option is supplied. The variable MAPFILE is the default array. Options, if supplied, have the following meanings:

    -n
        Copy at most count lines. If count is 0, all lines are copied.
    -O
        Begin assigning to array at index origin. The default index is 0.
    -s
        Discard the first count lines read.
    -t
        Remove a trailing line from each line read.
    -u
        Read lines from file descriptor fd instead of the standard input.
    -C
        Evaluate callback each time quantumP lines are read. The -c option specifies quantum.
    -c
        Specify the number of lines read between each call to callback. 

    If -C is specified without -c, the default quantum is 5000. When callback is evaluated, it is supplied the index of the next array element to be assigned as an additional argument. callback is evaluated after the line is read but before the array element is assigned.

    If not supplied with an explicit origin, mapfile will clear array before assigning to it.

    mapfile returns successfully unless an invalid option or option argument is supplied, or array is invalid or unassignable.
printf

              printf [-v var] format [arguments]

    Write the formatted arguments to the standard output under the control of the format. The format is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences, which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive argument. In addition to the standard printf(1) formats, ‘%b’ causes printf to expand backslash escape sequences in the corresponding argument, (except that ‘\c’ terminates output, backslashes in ‘\'’, ‘\"’, and ‘\?’ are not removed, and octal escapes beginning with ‘\0’ may contain up to four digits), and ‘%q’ causes printf to output the corresponding argument in a format that can be reused as shell input.

    The -v option causes the output to be assigned to the variable var rather than being printed to the standard output.

    The format is reused as necessary to consume all of the arguments. If the format requires more arguments than are supplied, the extra format specifications behave as if a zero value or null string, as appropriate, had been supplied. The return value is zero on success, non-zero on failure.
read

              read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-p prompt] [-t timeout] [-u fd] [name ...]

    One line is read from the standard input, or from the file descriptor fd supplied as an argument to the -u option, and the first word is assigned to the first name, the second word to the second name, and so on, with leftover words and their intervening separators assigned to the last name. If there are fewer words read from the input stream than names, the remaining names are assigned empty values. The characters in the value of the IFS variable are used to split the line into words. The backslash character ‘\’ may be used to remove any special meaning for the next character read and for line continuation. If no names are supplied, the line read is assigned to the variable REPLY. The return code is zero, unless end-of-file is encountered, read times out (in which case the return code is greater than 128), or an invalid file descriptor is supplied as the argument to -u.

    Options, if supplied, have the following meanings:

    -a aname
        The words are assigned to sequential indices of the array variable aname, starting at 0. All elements are removed from aname before the assignment. Other name arguments are ignored.
    -d delim
        The first character of delim is used to terminate the input line, rather than newline.
    -e
        Readline (see Command Line Editing) is used to obtain the line. Readline uses the current (or default, if line editing was not previously active) editing settings.
    -i text
        If Readline is being used to read the line, text is placed into the editing buffer before editing begins.
    -n nchars
        read returns after reading nchars characters rather than waiting for a complete line of input.
    -p prompt
        Display prompt, without a trailing newline, before attempting to read any input. The prompt is displayed only if input is coming from a terminal.
    -r
        If this option is given, backslash does not act as an escape character. The backslash is considered to be part of the line. In particular, a backslash-newline pair may not be used as a line continuation.
    -s
        Silent mode. If input is coming from a terminal, characters are not echoed.
    -t timeout
        Cause read to time out and return failure if a complete line of input is not read within timeout seconds. timeout may be a decimal number with a fractional portion following the decimal point. This option is only effective if read is reading input from a terminal, pipe, or other special file; it has no effect when reading from regular files. If timeout is 0, read returns success if input is available on the specified file descriptor, failure otherwise. The exit status is greater than 128 if the timeout is exceeded.
    -u fd
        Read input from file descriptor fd. 


readarray

              readarray [-n count] [-O origin] [-s count] [-t] [-u fd] [
              -C callback] [-c quantum] [array]

    Read lines from the standard input into array variable array, or from file descriptor fd if the -u option is supplied.

    A synonym for mapfile.
source

              source filename

    A synonym for . (see Bourne Shell Builtins).
type

              type [-afptP] [name ...]

    For each name, indicate how it would be interpreted if used as a command name.

    If the -t option is used, type prints a single word which is one of ‘alias’, ‘function’, ‘builtin’, ‘file’ or ‘keyword’, if name is an alias, shell function, shell builtin, disk file, or shell reserved word, respectively. If the name is not found, then nothing is printed, and type returns a failure status.

    If the -p option is used, type either returns the name of the disk file that would be executed, or nothing if -t would not return ‘file’.

    The -P option forces a path search for each name, even if -t would not return ‘file’.

    If a command is hashed, -p and -P print the hashed value, not necessarily the file that appears first in $PATH.

    If the -a option is used, type returns all of the places that contain an executable named file. This includes aliases and functions, if and only if the -p option is not also used.

    If the -f option is used, type does not attempt to find shell functions, as with the command builtin.

    The return status is zero if all of the names are found, non-zero if any are not found.
typeset

              typeset [-afFrxi] [-p] [name[=value] ...]

    The typeset command is supplied for compatibility with the Korn shell; however, it has been deprecated in favor of the declare builtin command.
ulimit

              ulimit [-abcdefilmnpqrstuvxHST] [limit]

    ulimit provides control over the resources available to processes started by the shell, on systems that allow such control. If an option is given, it is interpreted as follows:

    -S
        Change and report the soft limit associated with a resource.
    -H
        Change and report the hard limit associated with a resource.
    -a
        All current limits are reported.
    -b
        The maximum socket buffer size.
    -c
        The maximum size of core files created.
    -d
        The maximum size of a process's data segment.
    -e
        The maximum scheduling priority ("nice").
    -f
        The maximum size of files written by the shell and its children.
    -i
        The maximum number of pending signals.
    -l
        The maximum size that may be locked into memory.
    -m
        The maximum resident set size (many systems do not honor this limit).
    -n
        The maximum number of open file descriptors (most systems do not allow this value to be set).
    -p
        The pipe buffer size.
    -q
        The maximum number of bytes in POSIX message queues.
    -r
        The maximum real-time scheduling priority.
    -s
        The maximum stack size.
    -t
        The maximum amount of cpu time in seconds.
    -u
        The maximum number of processes available to a single user.
    -v
        The maximum amount of virtual memory available to the process.
    -x
        The maximum number of file locks.
    -T
        The maximum number of threads. 

    If limit is given, it is the new value of the specified resource; the special limit values hard, soft, and unlimited stand for the current hard limit, the current soft limit, and no limit, respectively. A hard limit cannot be increased by a non-root user once it is set; a soft limit may be increased up to the value of the hard limit. Otherwise, the current value of the soft limit for the specified resource is printed, unless the -H option is supplied. When setting new limits, if neither -H nor -S is supplied, both the hard and soft limits are set. If no option is given, then -f is assumed. Values are in 1024-byte increments, except for -t, which is in seconds, -p, which is in units of 512-byte blocks, and -n and -u, which are unscaled values.

    The return status is zero unless an invalid option or argument is supplied, or an error occurs while setting a new limit.
unalias

              unalias [-a] [name ... ]

    Remove each name from the list of aliases. If -a is supplied, all aliases are removed. Aliases are described in Aliases. 

=== Modifying Shell Behavior ===

    * The Set Builtin: Change the values of shell attributes and positional parameters.
    * The Shopt Builtin: Modify shell optional behavior. 

==== The Set Builtin ====

This builtin is so complicated that it deserves its own section. set allows you to change the values of shell options and set the positional parameters, or to display the names and values of shell variables.

set

              set [--abefhkmnptuvxBCEHPT] [-o option] [argument ...]
              set [+abefhkmnptuvxBCEHPT] [+o option] [argument ...]

    If no options or arguments are supplied, set displays the names and values of all shell variables and functions, sorted according to the current locale, in a format that may be reused as input for setting or resetting the currently-set variables. Read-only variables cannot be reset. In posix mode, only shell variables are listed.

    When options are supplied, they set or unset shell attributes. Options, if specified, have the following meanings:

    -a
        Mark variables and function which are modified or created for export to the environment of subsequent commands.
    -b
        Cause the status of terminated background jobs to be reported immediately, rather than before printing the next primary prompt.
    -e
        Exit immediately if a pipeline (see Pipelines), which may consist of a single simple command (see Simple Commands), a subshell command enclosed in parentheses (see Command Grouping), or one of the commands executed as part of a command list enclosed by braces (see Command Grouping) returns a non-zero status. The shell does not exit if the command that fails is part of the command list immediately following a while or until keyword, part of the test in an if statement, part of any command executed in a && or || list except the command following the final && or ||, any command in a pipeline but the last, or if the command's return status is being inverted with !. A trap on ERR, if set, is executed before the shell exits.

        This option applies to the shell environment and each subshell environment separately (see Command Execution Environment), and may cause subshells to exit before executing all the commands in the subshell.
    -f
        Disable file name generation (globbing).
    -h
        Locate and remember (hash) commands as they are looked up for execution. This option is enabled by default.
    -k
        All arguments in the form of assignment statements are placed in the environment for a command, not just those that precede the command name.
    -m
        Job control is enabled (see Job Control).
    -n
        Read commands but do not execute them; this may be used to check a script for syntax errors. This option is ignored by interactive shells.
    -o option-name
        Set the option corresponding to option-name:

        allexport
            Same as -a.
        braceexpand
            Same as -B.
        emacs
            Use an emacs-style line editing interface (see Command Line Editing). This also affects the editing interface used for read -e.
        errexit
            Same as -e.
        errtrace
            Same as -E.
        functrace
            Same as -T.
        hashall
            Same as -h.
        histexpand
            Same as -H.
        history
            Enable command history, as described in Bash History Facilities. This option is on by default in interactive shells.
        ignoreeof
            An interactive shell will not exit upon reading EOF.
        keyword
            Same as -k.
        monitor
            Same as -m.
        noclobber
            Same as -C.
        noexec
            Same as -n.
        noglob
            Same as -f.
        nolog
            Currently ignored.
        notify
            Same as -b.
        nounset
            Same as -u.
        onecmd
            Same as -t.
        physical
            Same as -P.
        pipefail
            If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default.
        posix
            Change the behavior of Bash where the default operation differs from the posix standard to match the standard (see Bash POSIX Mode). This is intended to make Bash behave as a strict superset of that standard.
        privileged
            Same as -p.
        verbose
            Same as -v.
        vi
            Use a vi-style line editing interface. This also affects the editing interface used for read -e.
        xtrace
            Same as -x. 


    -p
        Turn on privileged mode. In this mode, the $BASH_ENV and $ENV files are not processed, shell functions are not inherited from the environment, and the SHELLOPTS, CDPATH and GLOBIGNORE variables, if they appear in the environment, are ignored. If the shell is started with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied, these actions are taken and the effective user id is set to the real user id. If the -p option is supplied at startup, the effective user id is not reset. Turning this option off causes the effective user and group ids to be set to the real user and group ids.
    -t
        Exit after reading and executing one command.
    -u
        Treat unset variables as an error when performing parameter expansion. An error message will be written to the standard error, and a non-interactive shell will exit.
    -v
        Print shell input lines as they are read.
    -x
        Print a trace of simple commands, for commands, case commands, select commands, and arithmetic for commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the PS4 variable is expanded and the resultant value is printed before the command and its expanded arguments.
    -B
        The shell will perform brace expansion (see Brace Expansion). This option is on by default.
    -C
        Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing files.
    -E
        If set, any trap on ERR is inherited by shell functions, command substitutions, and commands executed in a subshell environment. The ERR trap is normally not inherited in such cases.
    -H
        Enable ‘!’ style history substitution (see History Interaction). This option is on by default for interactive shells.
    -P
        If set, do not follow symbolic links when performing commands such as cd which change the current directory. The physical directory is used instead. By default, Bash follows the logical chain of directories when performing commands which change the current directory.

        For example, if /usr/sys is a symbolic link to /usr/local/sys then:

                       $ cd /usr/sys; echo $PWD
                       /usr/sys
                       $ cd ..; pwd
                       /usr

        If set -P is on, then:

                       $ cd /usr/sys; echo $PWD
                       /usr/local/sys
                       $ cd ..; pwd
                       /usr/local


    -T
        If set, any trap on DEBUG and RETURN are inherited by shell functions, command substitutions, and commands executed in a subshell environment. The DEBUG and RETURN traps are normally not inherited in such cases.
    --
        If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters are set to the arguments, even if some of them begin with a ‘-’.
    -
        Signal the end of options, cause all remaining arguments to be assigned to the positional parameters. The -x and -v options are turned off. If there are no arguments, the positional parameters remain unchanged. 

    Using ‘+’ rather than ‘-’ causes these options to be turned off. The options can also be used upon invocation of the shell. The current set of options may be found in $-.

    The remaining N arguments are positional parameters and are assigned, in order, to $1, $2, ... $N. The special parameter # is set to N.

    The return status is always zero unless an invalid option is supplied. 

==== The Shopt Builtin ====

This builtin allows you to change additional shell optional behavior.

shopt

              shopt [-pqsu] [-o] [optname ...]

    Toggle the values of variables controlling optional shell behavior. With no options, or with the -p option, a list of all settable options is displayed, with an indication of whether or not each is set. The -p option causes output to be displayed in a form that may be reused as input. Other options have the following meanings:

    -s
        Enable (set) each optname.
    -u
        Disable (unset) each optname.
    -q
        Suppresses normal output; the return status indicates whether the optname is set or unset. If multiple optname arguments are given with -q, the return status is zero if all optnames are enabled; non-zero otherwise.
    -o
        Restricts the values of optname to be those defined for the -o option to the set builtin (see The Set Builtin). 

    If either -s or -u is used with no optname arguments, the display is limited to those options which are set or unset, respectively.

    Unless otherwise noted, the shopt options are disabled (off) by default.

    The return status when listing options is zero if all optnames are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an optname is not a valid shell option.

    The list of shopt options is:

    autocd
        If set, a command name that is the name of a directory is executed as if it were the argument to the cd command. This option is only used by interactive shells.
    cdable_vars
        If this is set, an argument to the cd builtin command that is not a directory is assumed to be the name of a variable whose value is the directory to change to.
    cdspell
        If set, minor errors in the spelling of a directory component in a cd command will be corrected. The errors checked for are transposed characters, a missing character, and a character too many. If a correction is found, the corrected path is printed, and the command proceeds. This option is only used by interactive shells.
    checkhash
        If this is set, Bash checks that a command found in the hash table exists before trying to execute it. If a hashed command no longer exists, a normal path search is performed.
    checkjobs
        If set, Bash lists the status of any stopped and running jobs before exiting an interactive shell. If any jobs are running, this causes the exit to be deferred until a second exit is attempted without an intervening command (see Job Control). The shell always postpones exiting if any jobs are stopped.
    checkwinsize
        If set, Bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.
    cmdhist
        If set, Bash attempts to save all lines of a multiple-line command in the same history entry. This allows easy re-editing of multi-line commands.
    compat31
        If set, Bash changes its behavior to that of version 3.1 with respect to quoted arguments to the conditional command's =~ operator.
    dirspell
        If set, Bash attempts spelling correction on directory names during word completion if the directory name initially supplied does not exist.
    dotglob
        If set, Bash includes filenames beginning with a `.' in the results of filename expansion.
    execfail
        If this is set, a non-interactive shell will not exit if it cannot execute the file specified as an argument to the exec builtin command. An interactive shell does not exit if exec fails.
    expand_aliases
        If set, aliases are expanded as described below under Aliases, Aliases. This option is enabled by default for interactive shells.
    extdebug
        If set, behavior intended for use by debuggers is enabled:

           1. The -F option to the declare builtin (see Bash Builtins) displays the source file name and line number corresponding to each function name supplied as an argument.
           2. If the command run by the DEBUG trap returns a non-zero value, the next command is skipped and not executed.
           3. If the command run by the DEBUG trap returns a value of 2, and the shell is executing in a subroutine (a shell function or a shell script executed by the . or source builtins), a call to return is simulated.
           4. BASH_ARGC and BASH_ARGV are updated as described in their descriptions (see Bash Variables).
           5. Function tracing is enabled: command substitution, shell functions, and subshells invoked with ( command ) inherit the DEBUG and RETURN traps.
           6. Error tracing is enabled: command substitution, shell functions, and subshells invoked with ( command ) inherit the ERROR trap. 


    extglob
        If set, the extended pattern matching features described above (see Pattern Matching) are enabled.
    extquote
        If set, $'string' and $"string" quoting is performed within ${parameter} expansions enclosed in double quotes. This option is enabled by default.
    failglob
        If set, patterns which fail to match filenames during pathname expansion result in an expansion error.
    force_fignore
        If set, the suffixes specified by the FIGNORE shell variable cause words to be ignored when performing word completion even if the ignored words are the only possible completions. See Bash Variables, for a description of FIGNORE. This option is enabled by default.
    globstar
        If set, the pattern ‘**’ used in a filename expansion context will match a files and zero or more directories and subdirectories. If the pattern is followed by a ‘/’, only directories and subdirectories match.
    gnu_errfmt
        If set, shell error messages are written in the standard gnu error message format.
    histappend
        If set, the history list is appended to the file named by the value of the HISTFILE variable when the shell exits, rather than overwriting the file.
    histreedit
        If set, and Readline is being used, a user is given the opportunity to re-edit a failed history substitution.
    histverify
        If set, and Readline is being used, the results of history substitution are not immediately passed to the shell parser. Instead, the resulting line is loaded into the Readline editing buffer, allowing further modification.
    hostcomplete
        If set, and Readline is being used, Bash will attempt to perform hostname completion when a word containing a ‘@’ is being completed (see Commands For Completion). This option is enabled by default.
    huponexit
        If set, Bash will send SIGHUP to all jobs when an interactive login shell exits (see Signals).
    interactive_comments
        Allow a word beginning with ‘#’ to cause that word and all remaining characters on that line to be ignored in an interactive shell. This option is enabled by default.
    lithist
        If enabled, and the cmdhist option is enabled, multi-line commands are saved to the history with embedded newlines rather than using semicolon separators where possible.
    login_shell
        The shell sets this option if it is started as a login shell (see Invoking Bash). The value may not be changed.
    mailwarn
        If set, and a file that Bash is checking for mail has been accessed since the last time it was checked, the message "The mail in mailfile has been read" is displayed.
    no_empty_cmd_completion
        If set, and Readline is being used, Bash will not attempt to search the PATH for possible completions when completion is attempted on an empty line.
    nocaseglob
        If set, Bash matches filenames in a case-insensitive fashion when performing filename expansion.
    nocasematch
        If set, Bash matches patterns in a case-insensitive fashion when performing matching while executing case or [[ conditional commands.
    nullglob
        If set, Bash allows filename patterns which match no files to expand to a null string, rather than themselves.
    progcomp
        If set, the programmable completion facilities (see Programmable Completion) are enabled. This option is enabled by default.
    promptvars
        If set, prompt strings undergo parameter expansion, command substitution, arithmetic expansion, and quote removal after being expanded as described below (see Printing a Prompt). This option is enabled by default.
    restricted_shell
        The shell sets this option if it is started in restricted mode (see The Restricted Shell). The value may not be changed. This is not reset when the startup files are executed, allowing the startup files to discover whether or not a shell is restricted.
    shift_verbose
        If this is set, the shift builtin prints an error message when the shift count exceeds the number of positional parameters.
    sourcepath
        If set, the source builtin uses the value of PATH to find the directory containing the file supplied as an argument. This option is enabled by default.
    xpg_echo
        If set, the echo builtin expands backslash-escape sequences by default. 

    The return status when listing options is zero if all optnames are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an optname is not a valid shell option. 

=== Special Builtins ===

For historical reasons, the posix standard has classified several builtin commands as special. When Bash is executing in posix mode, the special builtins differ from other builtin commands in three respects:

   1. Special builtins are found before shell functions during command lookup.
   2. If a special builtin returns an error status, a non-interactive shell exits.
   3. Assignment statements preceding the command stay in effect in the shell environment after the command completes. 

When Bash is not executing in posix mode, these builtins behave no differently than the rest of the Bash builtin commands. The Bash posix mode is described in Bash POSIX Mode.

These are the posix special builtins:

     break : . continue eval exec exit export readonly return set
     shift trap unset

== Shell Variables ==

    * Bourne Shell Variables: Variables which Bash uses in the same way as the Bourne Shell.
    * Bash Variables: List of variables that exist in Bash. 

This chapter describes the shell variables that Bash uses. Bash automatically assigns default values to a number of variables. 

=== Bourne Shell Variables ===

Bash uses certain shell variables in the same way as the Bourne shell. In some cases, Bash assigns a default value to the variable.

CDPATH
    A colon-separated list of directories used as a search path for the cd builtin command.
HOME
    The current user's home directory; the default for the cd builtin command. The value of this variable is also used by tilde expansion (see Tilde Expansion).
IFS
    A list of characters that separate fields; used when the shell splits words as part of expansion.
MAIL
    If this parameter is set to a filename and the MAILPATH variable is not set, Bash informs the user of the arrival of mail in the specified file.
MAILPATH
    A colon-separated list of filenames which the shell periodically checks for new mail. Each list entry can specify the message that is printed when new mail arrives in the mail file by separating the file name from the message with a ‘?’. When used in the text of the message, $_ expands to the name of the current mail file.
OPTARG
    The value of the last option argument processed by the getopts builtin.
OPTIND
    The index of the last option argument processed by the getopts builtin.
PATH
    A colon-separated list of directories in which the shell looks for commands. A zero-length (null) directory name in the value of PATH indicates the current directory. A null directory name may appear as two adjacent colons, or as an initial or trailing colon.
PS1
    The primary prompt string. The default value is ‘\s-\v\$ ’. See Printing a Prompt, for the complete list of escape sequences that are expanded before PS1 is displayed.
PS2
    The secondary prompt string. The default value is ‘> ’. 

=== Bash Variables ===

These variables are set or used by Bash, but other shells do not normally treat them specially.

A few variables used by Bash are described in different chapters: variables for controlling the job control facilities (see Job Control Variables).

BASH
    The full pathname used to execute the current instance of Bash.
BASHPID
    Expands to the process id of the current Bash process. This differs from $$ under certain circumstances, such as subshells that do not require Bash to be re-initialized.
BASH_ALIASES
    An associative array variable whose members correspond to the internal list of aliases as maintained by the alias builtin (see Bourne Shell Builtins). Elements added to this array appear in the alias list; unsetting array elements cause aliases to be removed from the alias list.
BASH_ARGC
    An array variable whose values are the number of parameters in each frame of the current bash execution call stack. The number of parameters to the current subroutine (shell function or script executed with . or source) is at the top of the stack. When a subroutine is executed, the number of parameters passed is pushed onto BASH_ARGC. The shell sets BASH_ARGC only when in extended debugging mode (see The Shopt Builtin for a description of the extdebug option to the shopt builtin).
BASH_ARGV
    An array variable containing all of the parameters in the current bash execution call stack. The final parameter of the last subroutine call is at the top of the stack; the first parameter of the initial call is at the bottom. When a subroutine is executed, the parameters supplied are pushed onto BASH_ARGV. The shell sets BASH_ARGV only when in extended debugging mode (see The Shopt Builtin for a description of the extdebug option to the shopt builtin).
BASH_CMDS
    An associative array variable whose members correspond to the internal hash table of commands as maintained by the hash builtin (see Bourne Shell Builtins). Elements added to this array appear in the hash table; unsetting array elements cause commands to be removed from the hash table.
BASH_COMMAND
    The command currently being executed or about to be executed, unless the shell is executing a command as the result of a trap, in which case it is the command executing at the time of the trap.
BASH_ENV
    If this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See Bash Startup Files.
BASH_EXECUTION_STRING
    The command argument to the -c invocation option.
BASH_LINENO
    An array variable whose members are the line numbers in source files corresponding to each member of FUNCNAME. ${BASH_LINENO[$i]} is the line number in the source file where ${FUNCNAME[$i]} was called (or ${BASH_LINENO[$i-1]} if referenced within another shell function). The corresponding source file name is ${BASH_SOURCE[$i]}. Use LINENO to obtain the current line number.
BASH_REMATCH
    An array variable whose members are assigned by the ‘=~’ binary operator to the [[ conditional command (see Conditional Constructs). The element with index 0 is the portion of the string matching the entire regular expression. The element with index n is the portion of the string matching the nth parenthesized subexpression. This variable is read-only.
BASH_SOURCE
    An array variable whose members are the source filenames corresponding to the elements in the FUNCNAME array variable.
BASH_SUBSHELL
    Incremented by one each time a subshell or subshell environment is spawned. The initial value is 0.
BASH_VERSINFO
    A readonly array variable (see Arrays) whose members hold version information for this instance of Bash. The values assigned to the array members are as follows:

    BASH_VERSINFO[0]
        The major version number (the release).
    BASH_VERSINFO[1]
        The minor version number (the version).
    BASH_VERSINFO[2]
        The patch level.
    BASH_VERSINFO[3]
        The build version.
    BASH_VERSINFO[4]
        The release status (e.g., beta1).
    BASH_VERSINFO[5]
        The value of MACHTYPE. 


BASH_VERSION
    The version number of the current instance of Bash.
COLUMNS
    Used by the select builtin command to determine the terminal width when printing selection lists. Automatically set upon receipt of a SIGWINCH.
COMP_CWORD
    An index into ${COMP_WORDS} of the word containing the current cursor position. This variable is available only in shell functions invoked by the programmable completion facilities (see Programmable Completion).
COMP_LINE
    The current command line. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion).
COMP_POINT
    The index of the current cursor position relative to the beginning of the current command. If the current cursor position is at the end of the current command, the value of this variable is equal to ${#COMP_LINE}. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion).
COMP_TYPE
    Set to an integer value corresponding to the type of completion attempted that caused a completion function to be called: TAB, for normal completion, ‘?’, for listing completions after successive tabs, ‘!’, for listing alternatives on partial word completion, ‘@’, to list completions if the word is not unmodified, or ‘%’, for menu completion. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion).
COMP_KEY
    The key (or final key of a key sequence) used to invoke the current completion function.
COMP_WORDBREAKS
    The set of characters that the Readline library treats as word separators when performing word completion. If COMP_WORDBREAKS is unset, it loses its special properties, even if it is subsequently reset.
COMP_WORDS
    An array variable consisting of the individual words in the current command line. The line is split into words as Readline would split it, using COMP_WORDBREAKS as described above. This variable is available only in shell functions invoked by the programmable completion facilities (see Programmable Completion).
COMPREPLY
    An array variable from which Bash reads the possible completions generated by a shell function invoked by the programmable completion facility (see Programmable Completion).
DIRSTACK
    An array variable containing the current contents of the directory stack. Directories appear in the stack in the order they are displayed by the dirs builtin. Assigning to members of this array variable may be used to modify directories already in the stack, but the pushd and popd builtins must be used to add and remove directories. Assignment to this variable will not change the current directory. If DIRSTACK is unset, it loses its special properties, even if it is subsequently reset.
EMACS
    If Bash finds this variable in the environment when the shell starts with value ‘t’, it assumes that the shell is running in an emacs shell buffer and disables line editing.
EUID
    The numeric effective user id of the current user. This variable is readonly.
FCEDIT
    The editor used as a default by the -e option to the fc builtin command.
FIGNORE
    A colon-separated list of suffixes to ignore when performing filename completion. A file name whose suffix matches one of the entries in FIGNORE is excluded from the list of matched file names. A sample value is ‘.o:~’
FUNCNAME
    An array variable containing the names of all shell functions currently in the execution call stack. The element with index 0 is the name of any currently-executing shell function. The bottom-most element is "main". This variable exists only when a shell function is executing. Assignments to FUNCNAME have no effect and return an error status. If FUNCNAME is unset, it loses its special properties, even if it is subsequently reset.
GLOBIGNORE
    A colon-separated list of patterns defining the set of filenames to be ignored by filename expansion. If a filename matched by a filename expansion pattern also matches one of the patterns in GLOBIGNORE, it is removed from the list of matches.
GROUPS
    An array variable containing the list of groups of which the current user is a member. Assignments to GROUPS have no effect and return an error status. If GROUPS is unset, it loses its special properties, even if it is subsequently reset.
histchars
    Up to three characters which control history expansion, quick substitution, and tokenization (see History Interaction). The first character is the history expansion character, that is, the character which signifies the start of a history expansion, normally ‘!’. The second character is the character which signifies `quick substitution' when seen as the first character on a line, normally ‘^’. The optional third character is the character which indicates that the remainder of the line is a comment when found as the first character of a word, usually ‘#’. The history comment character causes history substitution to be skipped for the remaining words on the line. It does not necessarily cause the shell parser to treat the rest of the line as a comment.
HISTCMD
    The history number, or index in the history list, of the current command. If HISTCMD is unset, it loses its special properties, even if it is subsequently reset.
HISTCONTROL
    A colon-separated list of values controlling how commands are saved on the history list. If the list of values includes ‘ignorespace’, lines which begin with a space character are not saved in the history list. A value of ‘ignoredups’ causes lines which match the previous history entry to not be saved. A value of ‘ignoreboth’ is shorthand for ‘ignorespace’ and ‘ignoredups’. A value of ‘erasedups’ causes all previous lines matching the current line to be removed from the history list before that line is saved. Any value not in the above list is ignored. If HISTCONTROL is unset, or does not include a valid value, all lines read by the shell parser are saved on the history list, subject to the value of HISTIGNORE. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of HISTCONTROL.
HISTFILE
    The name of the file to which the command history is saved. The default value is ~/.bash_history.
HISTFILESIZE
    The maximum number of lines contained in the history file. When this variable is assigned a value, the history file is truncated, if necessary, by removing the oldest entries, to contain no more than that number of lines. The history file is also truncated to this size after writing it when an interactive shell exits. The default value is 500.
HISTIGNORE
    A colon-separated list of patterns used to decide which command lines should be saved on the history list. Each pattern is anchored at the beginning of the line and must match the complete line (no implicit ‘*’ is appended). Each pattern is tested against the line after the checks specified by HISTCONTROL are applied. In addition to the normal shell pattern matching characters, ‘&’ matches the previous history line. ‘&’ may be escaped using a backslash; the backslash is removed before attempting a match. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of HISTIGNORE.

    HISTIGNORE subsumes the function of HISTCONTROL. A pattern of ‘&’ is identical to ignoredups, and a pattern of ‘[ ]*’ is identical to ignorespace. Combining these two patterns, separating them with a colon, provides the functionality of ignoreboth.
HISTSIZE
    The maximum number of commands to remember on the history list. The default value is 500.
HISTTIMEFORMAT
    If this variable is set and not null, its value is used as a format string for strftime to print the time stamp associated with each history entry displayed by the history builtin. If this variable is set, time stamps are written to the history file so they may be preserved across shell sessions. This uses the history comment character to distinguish timestamps from other history lines.
HOSTFILE
    Contains the name of a file in the same format as /etc/hosts that should be read when the shell needs to complete a hostname. The list of possible hostname completions may be changed while the shell is running; the next time hostname completion is attempted after the value is changed, Bash adds the contents of the new file to the existing list. If HOSTFILE is set, but has no value, Bash attempts to read /etc/hosts to obtain the list of possible hostname completions. When HOSTFILE is unset, the hostname list is cleared.
HOSTNAME
    The name of the current host.
HOSTTYPE
    A string describing the machine Bash is running on.
IGNOREEOF
    Controls the action of the shell on receipt of an EOF character as the sole input. If set, the value denotes the number of consecutive EOF characters that can be read as the first character on an input line before the shell will exit. If the variable exists but does not have a numeric value (or has no value) then the default is 10. If the variable does not exist, then EOF signifies the end of input to the shell. This is only in effect for interactive shells.
INPUTRC
    The name of the Readline initialization file, overriding the default of ~/.inputrc.
LANG
    Used to determine the locale category for any category not specifically selected with a variable starting with LC_.
LC_ALL
    This variable overrides the value of LANG and any other LC_ variable specifying a locale category.
LC_COLLATE
    This variable determines the collation order used when sorting the results of filename expansion, and determines the behavior of range expressions, equivalence classes, and collating sequences within filename expansion and pattern matching (see Filename Expansion).
LC_CTYPE
    This variable determines the interpretation of characters and the behavior of character classes within filename expansion and pattern matching (see Filename Expansion).
LC_MESSAGES
    This variable determines the locale used to translate double-quoted strings preceded by a ‘$’ (see Locale Translation).
LC_NUMERIC
    This variable determines the locale category used for number formatting.
LINENO
    The line number in the script or shell function currently executing.
LINES
    Used by the select builtin command to determine the column length for printing selection lists. Automatically set upon receipt of a SIGWINCH.
MACHTYPE
    A string that fully describes the system type on which Bash is executing, in the standard gnu cpu-company-system format.
MAILCHECK
    How often (in seconds) that the shell should check for mail in the files specified in the MAILPATH or MAIL variables. The default is 60 seconds. When it is time to check for mail, the shell does so before displaying the primary prompt. If this variable is unset, or set to a value that is not a number greater than or equal to zero, the shell disables mail checking.
OLDPWD
    The previous working directory as set by the cd builtin.
OPTERR
    If set to the value 1, Bash displays error messages generated by the getopts builtin command.
OSTYPE
    A string describing the operating system Bash is running on.
PIPESTATUS
    An array variable (see Arrays) containing a list of exit status values from the processes in the most-recently-executed foreground pipeline (which may contain only a single command).
POSIXLY_CORRECT
    If this variable is in the environment when bash starts, the shell enters posix mode (see Bash POSIX Mode) before reading the startup files, as if the --posix invocation option had been supplied. If it is set while the shell is running, bash enables posix mode, as if the command

              set -o posix

    had been executed.
PPID
    The process id of the shell's parent process. This variable is readonly.
PROMPT_COMMAND
    If set, the value is interpreted as a command to execute before the printing of each primary prompt ($PS1).
PROMPT_DIRTRIM
    If set to a number greater than zero, the value is used as the number of trailing directory components to retain when expanding the \w and \W prompt string escapes (see Printing a Prompt). Characters removed are replaced with an ellipsis.
PS3
    The value of this variable is used as the prompt for the select command. If this variable is not set, the select command prompts with ‘#? ’
PS4
    The value is the prompt printed before the command line is echoed when the -x option is set (see The Set Builtin). The first character of PS4 is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is ‘+ ’.
PWD
    The current working directory as set by the cd builtin.
RANDOM
    Each time this parameter is referenced, a random integer between 0 and 32767 is generated. Assigning a value to this variable seeds the random number generator.
REPLY
    The default variable for the read builtin.
SECONDS
    This variable expands to the number of seconds since the shell was started. Assignment to this variable resets the count to the value assigned, and the expanded value becomes the value assigned plus the number of seconds since the assignment.
SHELL
    The full pathname to the shell is kept in this environment variable. If it is not set when the shell starts, Bash assigns to it the full pathname of the current user's login shell.
SHELLOPTS
    A colon-separated list of enabled shell options. Each word in the list is a valid argument for the -o option to the set builtin command (see The Set Builtin). The options appearing in SHELLOPTS are those reported as ‘on’ by ‘set -o’. If this variable is in the environment when Bash starts up, each shell option in the list will be enabled before reading any startup files. This variable is readonly.
SHLVL
    Incremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested.
TIMEFORMAT
    The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the time reserved word should be displayed. The ‘%’ character introduces an escape sequence that is expanded to a time value or other information. The escape sequences and their meanings are as follows; the braces denote optional portions.

    %%
        A literal ‘%’.
    %[p][l]R
        The elapsed time in seconds.
    %[p][l]U
        The number of CPU seconds spent in user mode.
    %[p][l]S
        The number of CPU seconds spent in system mode.
    %P
        The CPU percentage, computed as (%U + %S) / %R. 

    The optional p is a digit specifying the precision, the number of fractional digits after a decimal point. A value of 0 causes no decimal point or fraction to be output. At most three places after the decimal point may be specified; values of p greater than 3 are changed to 3. If p is not specified, the value 3 is used.

    The optional l specifies a longer format, including minutes, of the form MMmSS.FFs. The value of p determines whether or not the fraction is included.

    If this variable is not set, Bash acts as if it had the value

              $'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS'

    If the value is null, no timing information is displayed. A trailing newline is added when the format string is displayed.
TMOUT
    If set to a value greater than zero, TMOUT is treated as the default timeout for the read builtin (see Bash Builtins). The select command (see Conditional Constructs) terminates if input does not arrive after TMOUT seconds when input is coming from a terminal.

    In an interactive shell, the value is interpreted as the number of seconds to wait for input after issuing the primary prompt when the shell is interactive. Bash terminates after that number of seconds if input does not arrive.
TMPDIR
    If set, Bash uses its value as the name of a directory in which Bash creates temporary files for the shell's use.
UID
    The numeric real user id of the current user. This variable is readonly. 

== Bash Features ==

This section describes features unique to Bash.

    * Invoking Bash: Command line options that you can give to Bash.
    * Bash Startup Files: When and how Bash executes scripts.
    * Interactive Shells: What an interactive shell is.
    * Bash Conditional Expressions: Primitives used in composing expressions for the test builtin.
    * Shell Arithmetic: Arithmetic on shell variables.
    * Aliases: Substituting one command for another.
    * Arrays: Array Variables.
    * The Directory Stack: History of visited directories.
    * Printing a Prompt: Controlling the PS1 string.
    * The Restricted Shell: A more controlled mode of shell execution.
    * Bash POSIX Mode: Making Bash behave more closely to what the POSIX standard specifies. 

=== Invoking Bash ===

     bash [long-opt] [-ir] [-abefhkmnptuvxdBCDHP] [-o option] [-O shopt_option] [argument ...]
     bash [long-opt] [-abefhkmnptuvxdBCDHP] [-o option] [-O shopt_option] -c string [argument ...]
     bash [long-opt] -s [-abefhkmnptuvxdBCDHP] [-o option] [-O shopt_option] [argument ...]

In addition to the single-character shell command-line options (see The Set Builtin), there are several multi-character options that you can use. These options must appear on the command line before the single-character options to be recognized.

--debugger
    Arrange for the debugger profile to be executed before the shell starts. Turns on extended debugging mode (see The Shopt Builtin for a description of the extdebug option to the shopt builtin) and shell function tracing (see The Set Builtin for a description of the -o functrace option).
--dump-po-strings
    A list of all double-quoted strings preceded by ‘$’ is printed on the standard output in the gnu gettext PO (portable object) file format. Equivalent to -D except for the output format.
--dump-strings
    Equivalent to -D.
--help
    Display a usage message on standard output and exit successfully.
--init-file filename
--rcfile filename
    Execute commands from filename (instead of ~/.bashrc) in an interactive shell.
--login
    Equivalent to -l.
--noediting
    Do not use the gnu Readline library (see Command Line Editing) to read command lines when the shell is interactive.
--noprofile
    Don't load the system-wide startup file /etc/profile or any of the personal initialization files ~/.bash_profile, ~/.bash_login, or ~/.profile when Bash is invoked as a login shell.
--norc
    Don't read the ~/.bashrc initialization file in an interactive shell. This is on by default if the shell is invoked as sh.
--posix
    Change the behavior of Bash where the default operation differs from the posix standard to match the standard. This is intended to make Bash behave as a strict superset of that standard. See Bash POSIX Mode, for a description of the Bash posix mode.
--restricted
    Make the shell a restricted shell (see The Restricted Shell).
--verbose
    Equivalent to -v. Print shell input lines as they're read.
--version
    Show version information for this instance of Bash on the standard output and exit successfully. 

There are several single-character options that may be supplied at invocation which are not available with the set builtin.

-c string
    Read and execute commands from string after processing the options, then exit. Any remaining arguments are assigned to the positional parameters, starting with $0.
-i
    Force the shell to run interactively. Interactive shells are described in Interactive Shells.
-l
    Make this shell act as if it had been directly invoked by login. When the shell is interactive, this is equivalent to starting a login shell with ‘exec -l bash’. When the shell is not interactive, the login shell startup files will be executed. ‘exec bash -l’ or ‘exec bash --login’ will replace the current shell with a Bash login shell. See Bash Startup Files, for a description of the special behavior of a login shell.
-r
    Make the shell a restricted shell (see The Restricted Shell).
-s
    If this option is present, or if no arguments remain after option processing, then commands are read from the standard input. This option allows the positional parameters to be set when invoking an interactive shell.
-D
    A list of all double-quoted strings preceded by ‘$’ is printed on the standard output. These are the strings that are subject to language translation when the current locale is not C or POSIX (see Locale Translation). This implies the -n option; no commands will be executed.
[-+]O [shopt_option]
    shopt_option is one of the shell options accepted by the shopt builtin (see The Shopt Builtin). If shopt_option is present, -O sets the value of that option; +O unsets it. If shopt_option is not supplied, the names and values of the shell options accepted by shopt are printed on the standard output. If the invocation option is +O, the output is displayed in a format that may be reused as input.
--
    A -- signals the end of options and disables further option processing. Any arguments after the -- are treated as filenames and arguments. 

A login shell is one whose first character of argument zero is ‘-’, or one invoked with the --login option.

An interactive shell is one started without non-option arguments, unless -s is specified, without specifying the -c option, and whose input and output are both connected to terminals (as determined by isatty(3)), or one started with the -i option. See Interactive Shells, for more information.

If arguments remain after option processing, and neither the -c nor the -s option has been supplied, the first argument is assumed to be the name of a file containing shell commands (see Shell Scripts). When Bash is invoked in this fashion, $0 is set to the name of the file, and the positional parameters are set to the remaining arguments. Bash reads and executes commands from this file, then exits. Bash's exit status is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. 

=== Bash Startup Files ===

This section describes how Bash executes its startup files. If any of the files exist but cannot be read, Bash reports an error. Tildes are expanded in file names as described above under Tilde Expansion (see Tilde Expansion).

Interactive shells are described in Interactive Shells.
Invoked as an interactive login shell, or with --login

When Bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists. After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable. The --noprofile option may be used when the shell is started to inhibit this behavior.

When a login shell exits, Bash reads and executes commands from the file ~/.bash_logout, if it exists.
Invoked as an interactive non-login shell

When an interactive shell that is not a login shell is started, Bash reads and executes commands from ~/.bashrc, if that file exists. This may be inhibited by using the --norc option. The --rcfile file option will force Bash to read and execute commands from file instead of ~/.bashrc.

So, typically, your ~/.bash_profile contains the line

     if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

after (or before) any login-specific initializations.
Invoked non-interactively

When Bash is started non-interactively, to run a shell script, for example, it looks for the variable BASH_ENV in the environment, expands its value if it appears there, and uses the expanded value as the name of a file to read and execute. Bash behaves as if the following command were executed:

     if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi

but the value of the PATH variable is not used to search for the file name.

As noted above, if a non-interactive shell is invoked with the --login option, Bash attempts to read and execute commands from the login shell startup files.
Invoked with name sh

If Bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the posix standard as well.

When invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first attempts to read and execute commands from /etc/profile and ~/.profile, in that order. The --noprofile option may be used to inhibit this behavior. When invoked as an interactive shell with the name sh, Bash looks for the variable ENV, expands its value if it is defined, and uses the expanded value as the name of a file to read and execute. Since a shell invoked as sh does not attempt to read and execute commands from any other startup files, the --rcfile option has no effect. A non-interactive shell invoked with the name sh does not attempt to read any other startup files.

When invoked as sh, Bash enters posix mode after the startup files are read.
Invoked in posix mode

When Bash is started in posix mode, as with the --posix command line option, it follows the posix standard for startup files. In this mode, interactive shells expand the ENV variable and commands are read and executed from the file whose name is the expanded value. No other startup files are read.
Invoked by remote shell daemon

Bash attempts to determine when it is being run with its standard input connected to a a network connection, as if by the remote shell daemon, usually rshd, or the secure shell daemon sshd. If Bash determines it is being run in this fashion, it reads and executes commands from ~/.bashrc, if that file exists and is readable. It will not do this if invoked as sh. The --norc option may be used to inhibit this behavior, and the --rcfile option may be used to force another file to be read, but rshd does not generally invoke the shell with those options or allow them to be specified.
Invoked with unequal effective and real uid/gids

If Bash is started with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied, no startup files are read, shell functions are not inherited from the environment, the SHELLOPTS variable, if it appears in the environment, is ignored, and the effective user id is set to the real user id. If the -p option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset. 

=== Interactive Shells ===

    * What is an Interactive Shell?: What determines whether a shell is Interactive.
    * Is this Shell Interactive?: How to tell if a shell is interactive.
    * Interactive Shell Behavior: What changes in a interactive shell? 

==== What is an Interactive Shell? ====

An interactive shell is one started without non-option arguments, unless -s is specified, without specifying the -c option, and whose input and error output are both connected to terminals (as determined by isatty(3)), or one started with the -i option.

An interactive shell generally reads from and writes to a user's terminal.

The -s invocation option may be used to set the positional parameters when an interactive shell is started. 

==== Is this Shell Interactive? ====

To determine within a startup script whether or not Bash is running interactively, test the value of the ‘-’ special parameter. It contains i when the shell is interactive. For example:

     {{{case "$-" in
     *i*)	echo This shell is interactive ;;
     *)	echo This shell is not interactive ;;
     esac{{{

Alternatively, startup scripts may examine the variable PS1; it is unset in non-interactive shells, and set in interactive shells. Thus:

     if [ -z "$PS1" ]; then
             echo This shell is not interactive
     else
             echo This shell is interactive
     fi


==== Interactive Shell Behavior ====

When the shell is running interactively, it changes its behavior in several ways.

   1. Startup files are read and executed as described in Bash Startup Files.
   2. Job Control (see Job Control) is enabled by default. When job control is in effect, Bash ignores the keyboard-generated job control signals SIGTTIN, SIGTTOU, and SIGTSTP.
   3. Bash expands and displays PS1 before reading the first line of a command, and expands and displays PS2 before reading the second and subsequent lines of a multi-line command.
   4. Bash executes the value of the PROMPT_COMMAND variable as a command before printing the primary prompt, $PS1 (see Bash Variables).
   5. Readline (see Command Line Editing) is used to read commands from the user's terminal.
   6. Bash inspects the value of the ignoreeof option to set -o instead of exiting immediately when it receives an EOF on its standard input when reading a command (see The Set Builtin).
   7. Command history (see Bash History Facilities) and history expansion (see History Interaction) are enabled by default. Bash will save the command history to the file named by $HISTFILE when an interactive shell exits.
   8. Alias expansion (see Aliases) is performed by default.
   9. In the absence of any traps, Bash ignores SIGTERM (see Signals).
  10. In the absence of any traps, SIGINT is caught and handled ((see Signals). SIGINT will interrupt some shell builtins.
  11. An interactive login shell sends a SIGHUP to all jobs on exit if the huponexit shell option has been enabled (see Signals).
  12. The -n invocation option is ignored, and ‘set -n’ has no effect (see The Set Builtin).
  13. Bash will check for mail periodically, depending on the values of the MAIL, MAILPATH, and MAILCHECK shell variables (see Bash Variables).
  14. Expansion errors due to references to unbound shell variables after ‘set -u’ has been enabled will not cause the shell to exit (see The Set Builtin).
  15. The shell will not exit on expansion errors caused by var being unset or null in ${var:?word} expansions (see Shell Parameter Expansion).
  16. Redirection errors encountered by shell builtins will not cause the shell to exit.
  17. When running in posix mode, a special builtin returning an error status will not cause the shell to exit (see Bash POSIX Mode).
  18. A failed exec will not cause the shell to exit (see Bourne Shell Builtins).
  19. Parser syntax errors will not cause the shell to exit.
  20. Simple spelling correction for directory arguments to the cd builtin is enabled by default (see the description of the cdspell option to the shopt builtin in The Shopt Builtin).
  21. The shell will check the value of the TMOUT variable and exit if a command is not read within the specified number of seconds after printing $PS1 (see Bash Variables). 

=== Bash Conditional Expressions ===

Conditional expressions are used by the [[ compound command and the test and [ builtin commands.

Expressions may be unary or binary. Unary expressions are often used to examine the status of a file. There are string operators and numeric comparison operators as well. If the file argument to one of the primaries is of the form /dev/fd/N, then file descriptor N is checked. If the file argument to one of the primaries is one of /dev/stdin, /dev/stdout, or /dev/stderr, file descriptor 0, 1, or 2, respectively, is checked.

Unless otherwise specified, primaries that operate on files follow symbolic links and operate on the target of the link, rather than the link itself.

-a file
    True if file exists.
-b file
    True if file exists and is a block special file.
-c file
    True if file exists and is a character special file.
-d file
    True if file exists and is a directory.
-e file
    True if file exists.
-f file
    True if file exists and is a regular file.
-g file
    True if file exists and its set-group-id bit is set.
-h file
    True if file exists and is a symbolic link.
-k file
    True if file exists and its "sticky" bit is set.
-p file
    True if file exists and is a named pipe (FIFO).
-r file
    True if file exists and is readable.
-s file
    True if file exists and has a size greater than zero.
-t fd
    True if file descriptor fd is open and refers to a terminal.
-u file
    True if file exists and its set-user-id bit is set.
-w file
    True if file exists and is writable.
-x file
    True if file exists and is executable.
-O file
    True if file exists and is owned by the effective user id.
-G file
    True if file exists and is owned by the effective group id.
-L file
    True if file exists and is a symbolic link.
-S file
    True if file exists and is a socket.
-N file
    True if file exists and has been modified since it was last read.
file1 -nt file2
    True if file1 is newer (according to modification date) than file2, or if file1 exists and file2 does not.
file1 -ot file2
    True if file1 is older than file2, or if file2 exists and file1 does not.
file1 -ef file2
    True if file1 and file2 refer to the same device and inode numbers.
-o optname
    True if shell option optname is enabled. The list of options appears in the description of the -o option to the set builtin (see The Set Builtin).
-z string
    True if the length of string is zero.
-n string
string
    True if the length of string is non-zero.
string1 == string2
    True if the strings are equal. ‘=’ may be used in place of ‘==’ for strict posix compliance.
string1 != string2
    True if the strings are not equal.
string1 < string2
    True if string1 sorts before string2 lexicographically in the current locale.
string1 > string2
    True if string1 sorts after string2 lexicographically in the current locale.
arg1 OP arg2
    OP is one of ‘-eq’, ‘-ne’, ‘-lt’, ‘-le’, ‘-gt’, or ‘-ge’. These arithmetic binary operators return true if arg1 is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to arg2, respectively. Arg1 and arg2 may be positive or negative integers. 


=== Shell Arithmetic ===

The shell allows arithmetic expressions to be evaluated, as one of the shell expansions or by the let and the -i option to the declare builtins.

Evaluation is done in fixed-width integers with no check for overflow, though division by 0 is trapped and flagged as an error. The operators and their precedence, associativity, and values are the same as in the C language. The following list of operators is grouped into levels of equal-precedence operators. The levels are listed in order of decreasing precedence.

id++ id--
    variable post-increment and post-decrement
++id --id
    variable pre-increment and pre-decrement
- +
    unary minus and plus
! ~
    logical and bitwise negation
{{{**}}}
    exponentiation
{{{* / %}}}
    multiplication, division, remainder
+ -
    addition, subtraction
<< >>
    left and right bitwise shifts
{{{<= >= < >}}}
    comparison
{{{== !=}}}
    equality and inequality
&
    bitwise AND
^
    bitwise exclusive OR
|
    bitwise OR
&&
    logical AND
||
    logical OR
expr ? expr : expr
    conditional operator
{{{= *= /= %= += -= <<= >>= &= ^= |=}}}
    assignment
expr1 , expr2
    comma 

Shell variables are allowed as operands; parameter expansion is performed before the expression is evaluated. Within an expression, shell variables may also be referenced by name without using the parameter expansion syntax. A shell variable that is null or unset evaluates to 0 when referenced by name without using the parameter expansion syntax. The value of a variable is evaluated as an arithmetic expression when it is referenced, or when a variable which has been given the integer attribute using ‘declare -i’ is assigned a value. A null value evaluates to 0. A shell variable need not have its integer attribute turned on to be used in an expression.

Constants with a leading 0 are interpreted as octal numbers. A leading ‘0x’ or ‘0X’ denotes hexadecimal. Otherwise, numbers take the form [base#]n, where base is a decimal number between 2 and 64 representing the arithmetic base, and n is a number in that base. If base# is omitted, then base 10 is used. The digits greater than 9 are represented by the lowercase letters, the uppercase letters, ‘@’, and ‘_’, in that order. If base is less than or equal to 36, lowercase and uppercase letters may be used interchangeably to represent numbers between 10 and 35.

Operators are evaluated in order of precedence. Sub-expressions in parentheses are evaluated first and may override the precedence rules above. 

=== Aliases ===

Aliases allow a string to be substituted for a word when it is used as the first word of a simple command. The shell maintains a list of aliases that may be set and unset with the alias and unalias builtin commands.

The first word of each simple command, if unquoted, is checked to see if it has an alias. If so, that word is replaced by the text of the alias. The characters ‘/’, ‘$’, ‘`’, ‘=’ and any of the shell metacharacters or quoting characters listed above may not appear in an alias name. The replacement text may contain any valid shell input, including shell metacharacters. The first word of the replacement text is tested for aliases, but a word that is identical to an alias being expanded is not expanded a second time. This means that one may alias ls to "ls -F", for instance, and Bash does not try to recursively expand the replacement text. If the last character of the alias value is a space or tab character, then the next command word following the alias is also checked for alias expansion.

Aliases are created and listed with the alias command, and removed with the unalias command.

There is no mechanism for using arguments in the replacement text, as in csh. If arguments are needed, a shell function should be used (see Shell Functions).

Aliases are not expanded when the shell is not interactive, unless the expand_aliases shell option is set using shopt (see The Shopt Builtin).

The rules concerning the definition and use of aliases are somewhat confusing. Bash always reads at least one complete line of input before executing any of the commands on that line. Aliases are expanded when a command is read, not when it is executed. Therefore, an alias definition appearing on the same line as another command does not take effect until the next line of input is read. The commands following the alias definition on that line are not affected by the new alias. This behavior is also an issue when functions are executed. Aliases are expanded when a function definition is read, not when the function is executed, because a function definition is itself a compound command. As a consequence, aliases defined in a function are not available until after that function is executed. To be safe, always put alias definitions on a separate line, and do not use alias in compound commands.

For almost every purpose, shell functions are preferred over aliases. 

=== Arrays ===

Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the declare builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions (see Shell Arithmetic) and are zero-based; associative arrays use arbitrary strings.

An indexed array is created automatically if any variable is assigned to using the syntax

     name[subscript]=value

The subscript is treated as an arithmetic expression that must evaluate to a number greater than or equal to zero. To explicitly declare an array, use

     declare -a name

The syntax

     declare -a name[subscript]

is also accepted; the subscript is ignored.

Associative arrays are created using

     declare -A name.

Attributes may be specified for an array variable using the declare and readonly builtins. Each attribute applies to all members of an array.

Arrays are assigned to using compound assignments of the form

     name=(value1 ... valuen)

where each value is of the form [subscript]=string. Indexed array assignments do not require the bracket and subscript. When assigning to indexed arrays, if the optional subscript is supplied, that index is assigned to; otherwise the index of the element assigned is the last index assigned to by the statement plus one. Indexing starts at zero.

When assigning to an associative array, the subscript is required.

This syntax is also accepted by the declare builtin. Individual array elements may be assigned to using the name[subscript]=value syntax introduced above.

Any element of an array may be referenced using ${name[subscript]}. The braces are required to avoid conflicts with the shell's filename expansion operators. If the subscript is ‘@’ or {{{‘*’}}}, the word expands to all members of the array name. These subscripts differ only when the word appears within double quotes. If the word is double-quoted, ${name[{{{*}}}]} expands to a single word with the value of each array member separated by the first character of the IFS variable, and ${name[@]} expands each element of name to a separate word. When there are no array members, ${name[@]} expands to nothing. If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. This is analogous to the expansion of the special parameters ‘@’ and {{{‘*’}}}. ${#name[subscript]} expands to the length of ${name[subscript]}. If subscript is ‘@’ or {{{‘*’}}}, the expansion is the number of elements in the array. Referencing an array variable without a subscript is equivalent to referencing with a subscript of 0.

The unset builtin is used to destroy arrays. unset name[subscript] destroys the array element at index subscript. Care must be taken to avoid unwanted side effects caused by filename generation. unset name, where name is an array, removes the entire array. A subscript of {{{‘*’}}} or ‘@’ also removes the entire array.

The declare, local, and readonly builtins each accept a -a option to specify an indexed array and a -A option to specify an associative array. The read builtin accepts a -a option to assign a list of words read from the standard input to an array, and can read values from the standard input into individual array elements. The set and declare builtins display array values in a way that allows them to be reused as input. 

=== The Directory Stack ===

    * Directory Stack Builtins: Bash builtin commands to manipulate the directory stack. 

The directory stack is a list of recently-visited directories. The pushd builtin adds directories to the stack as it changes the current directory, and the popd builtin removes specified directories from the stack and changes the current directory to the directory removed. The dirs builtin displays the contents of the directory stack.

The contents of the directory stack are also visible as the value of the DIRSTACK shell variable. 


==== Directory Stack Builtins ====

dirs

              dirs [+N | -N] [-clpv]

    Display the list of currently remembered directories. Directories are added to the list with the pushd command; the popd command removes directories from the list.

    +N
        Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.
    -N
        Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.
    -c
        Clears the directory stack by deleting all of the elements.
    -l
        Produces a longer listing; the default listing format uses a tilde to denote the home directory.
    -p
        Causes dirs to print the directory stack with one entry per line.
    -v
        Causes dirs to print the directory stack with one entry per line, prefixing each entry with its index in the stack. 


popd

              popd [+N | -N] [-n]

    Remove the top entry from the directory stack, and cd to the new top directory. When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0.

    +N
        Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.
    -N
        Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.
    -n
        Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated. 


pushd

              pushd [-n] [+N | -N | dir ]

    Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories.

    -n
        Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.
    +N
        Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.
    -N
        Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.
    dir
        Makes the current working directory be the top of the stack, and then executes the equivalent of `cd dir'. cds to dir. 

=== Controlling the Prompt ===

The value of the variable PROMPT_COMMAND is examined just before Bash prints each primary prompt. If PROMPT_COMMAND is set and has a non-null value, then the value is executed just as if it had been typed on the command line.

In addition, the following table describes the special characters which can appear in the prompt variables:

\a
    A bell character.
\d
    The date, in "Weekday Month Date" format (e.g., "Tue May 26").
\D{format}
    The format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required.
\e
    An escape character.
\h
    The hostname, up to the first `.'.
\H
    The hostname.
\j
    The number of jobs currently managed by the shell.
\l
    The basename of the shell's terminal device name.
\n
    A newline.
\r
    A carriage return.
\s
    The name of the shell, the basename of $0 (the portion following the final slash).
\t
    The time, in 24-hour HH:MM:SS format.
\T
    The time, in 12-hour HH:MM:SS format.
\@
    The time, in 12-hour am/pm format.
\A
    The time, in 24-hour HH:MM format.
\u
    The username of the current user.
\v
    The version of Bash (e.g., 2.00)
\V
    The release of Bash, version + patchlevel (e.g., 2.00.0)
\w
    The current working directory, with $HOME abbreviated with a tilde (uses the $PROMPT_DIRTRIM variable).
\W
    The basename of $PWD, with $HOME abbreviated with a tilde.
\!
    The history number of this command.
\#
    The command number of this command.
\$
    If the effective uid is 0, #, otherwise $.
\nnn
    The character whose ASCII code is the octal value nnn.
\\
    A backslash.
\[
    Begin a sequence of non-printing characters. This could be used to embed a terminal control sequence into the prompt.
\]
    End a sequence of non-printing characters. 

The command number and the history number are usually different: the history number of a command is its position in the history list, which may include commands restored from the history file (see Bash History Facilities), while the command number is the position in the sequence of commands executed during the current shell session.

After the string is decoded, it is expanded via parameter expansion, command substitution, arithmetic expansion, and quote removal, subject to the value of the promptvars shell option (see Bash Builtins). 

=== The Restricted Shell ===

If Bash is started with the name rbash, or the --restricted or -r option is supplied at invocation, the shell becomes restricted. A restricted shell is used to set up an environment more controlled than the standard shell. A restricted shell behaves identically to bash with the exception that the following are disallowed or not performed:

    * Changing directories with the cd builtin.
    * Setting or unsetting the values of the SHELL, PATH, ENV, or BASH_ENV variables.
    * Specifying command names containing slashes.
    * Specifying a filename containing a slash as an argument to the . builtin command.
    * Specifying a filename containing a slash as an argument to the -p option to the hash builtin command.
    * Importing function definitions from the shell environment at startup.
    * Parsing the value of SHELLOPTS from the shell environment at startup.
    * Redirecting output using the ‘>’, ‘>|’, ‘<>’, ‘>&’, ‘&>’, and ‘>>’ redirection operators.
    * Using the exec builtin to replace the shell with another command.
    * Adding or deleting builtin commands with the -f and -d options to the enable builtin.
    * Using the enable builtin command to enable disabled shell builtins.
    * Specifying the -p option to the command builtin.
    * Turning off restricted mode with ‘set +r’ or ‘set +o restricted’. 

These restrictions are enforced after any startup files are read.

When a command that is found to be a shell script is executed (see Shell Scripts), rbash turns off any restrictions in the shell spawned to execute the script. 

=== Bash POSIX Mode ===

Starting Bash with the --posix command-line option or executing ‘set -o posix’ while Bash is running will cause Bash to conform more closely to the posix standard by changing the behavior to match that specified by posix in areas where the Bash default differs.

When invoked as sh, Bash enters posix mode after reading the startup files.

The following list is what's changed when `posix mode' is in effect:

   1. When a command in the hash table no longer exists, Bash will re-search $PATH to find the new location. This is also available with ‘shopt -s checkhash’.
   2. The message printed by the job control code and builtins when a job exits with a non-zero status is `Done(status)'.
   3. The message printed by the job control code and builtins when a job is stopped is `Stopped(signame)', where signame is, for example, SIGTSTP.
   4. The bg builtin uses the required format to describe each job placed in the background, which does not include an indication of whether the job is the current or previous job.
   5. Reserved words appearing in a context where reserved words are recognized do not undergo alias expansion.
   6. The posix PS1 and PS2 expansions of ‘!’ to the history number and ‘!!’ to ‘!’ are enabled, and parameter expansion is performed on the values of PS1 and PS2 regardless of the setting of the promptvars option.
   7. The posix startup files are executed ($ENV) rather than the normal Bash files.
   8. Tilde expansion is only performed on assignments preceding a command name, rather than on all assignment statements on the line.
   9. The default history file is ~/.sh_history (this is the default value of $HISTFILE).
  10. The output of ‘kill -l’ prints all the signal names on a single line, separated by spaces, without the ‘SIG’ prefix.
  11. The kill builtin does not accept signal names with a ‘SIG’ prefix.
  12. Non-interactive shells exit if filename in . filename is not found.
  13. Non-interactive shells exit if a syntax error in an arithmetic expansion results in an invalid expression.
  14. Redirection operators do not perform filename expansion on the word in the redirection unless the shell is interactive.
  15. Redirection operators do not perform word splitting on the word in the redirection.
  16. Function names must be valid shell names. That is, they may not contain characters other than letters, digits, and underscores, and may not start with a digit. Declaring a function with an invalid name causes a fatal syntax error in non-interactive shells.
  17. posix special builtins are found before shell functions during command lookup.
  18. If a posix special builtin returns an error status, a non-interactive shell exits. The fatal errors are those listed in the POSIX standard, and include things like passing incorrect options, redirection errors, variable assignment errors for assignments preceding the command name, and so on.
  19. If CDPATH is set, the cd builtin will not implicitly append the current directory to it. This means that cd will fail if no valid directory name can be constructed from any of the entries in $CDPATH, even if the a directory with the same name as the name given as an argument to cd exists in the current directory.
  20. A non-interactive shell exits with an error status if a variable assignment error occurs when no command name follows the assignment statements. A variable assignment error occurs, for example, when trying to assign a value to a readonly variable.
  21. A non-interactive shell exits with an error status if the iteration variable in a for statement or the selection variable in a select statement is a readonly variable.
  22. Process substitution is not available.
  23. Assignment statements preceding posix special builtins persist in the shell environment after the builtin completes.
  24. Assignment statements preceding shell function calls persist in the shell environment after the function returns, as if a posix special builtin command had been executed.
  25. The export and readonly builtin commands display their output in the format required by posix.
  26. The trap builtin displays signal names without the leading SIG.
  27. The trap builtin doesn't check the first argument for a possible signal specification and revert the signal handling to the original disposition if it is, unless that argument consists solely of digits and is a valid signal number. If users want to reset the handler for a given signal to the original disposition, they should use ‘-’ as the first argument.
  28. The . and source builtins do not search the current directory for the filename argument if it is not found by searching PATH.
  29. Subshells spawned to execute command substitutions inherit the value of the -e option from the parent shell. When not in posix mode, Bash clears the -e option in such subshells.
  30. Alias expansion is always enabled, even in non-interactive shells.
  31. When the alias builtin displays alias definitions, it does not display them with a leading ‘alias ’ unless the -p option is supplied.
  32. When the set builtin is invoked without options, it does not display shell function names and definitions.
  33. When the set builtin is invoked without options, it displays variable values without quotes, unless they contain shell metacharacters, even if the result contains nonprinting characters.
  34. When the cd builtin is invoked in logical mode, and the pathname constructed from $PWD and the directory name supplied as an argument does not refer to an existing directory, cd will fail instead of falling back to physical mode.
  35. When the pwd builtin is supplied the -P option, it resets $PWD to a pathname containing no symlinks.
  36. The pwd builtin verifies that the value it prints is the same as the current directory, even if it is not asked to check the file system with the -P option.
  37. When listing the history, the fc builtin does not include an indication of whether or not a history entry has been modified.
  38. The default editor used by fc is ed.
  39. The type and command builtins will not report a non-executable file as having been found, though the shell will attempt to execute such a file if it is the only so-named file found in $PATH.
  40. The vi editing mode will invoke the vi editor directly when the ‘v’ command is run, instead of checking $VISUAL and $EDITOR.
  41. When the xpg_echo option is enabled, Bash does not attempt to interpret any arguments to echo as options. Each argument is displayed, after escape characters are converted.
  42. The ulimit builtin uses a block size of 512 bytes for the -c and -f options. 

There is other posix behavior that Bash does not implement by default even when in posix mode. Specifically:

   1. The fc builtin checks $EDITOR as a program to edit history entries if FCEDIT is unset, rather than defaulting directly to ed. fc uses ed if EDITOR is unset.
   2. As noted above, Bash requires the xpg_echo option to be enabled for the echo builtin to be fully conformant. 

Bash can be configured to be posix-conformant by default, by specifying the --enable-strict-posix-default to configure when building (see Optional Features). 

== Job Control ==

This chapter discusses what job control is, how it works, and how Bash allows you to access its facilities.

    * Job Control Basics: How job control works.
    * Job Control Builtins: Bash builtin commands used to interact with job control.
    * Job Control Variables: Variables Bash uses to customize job control. 

=== Job Control Basics ===

Job control refers to the ability to selectively stop (suspend) the execution of processes and continue (resume) their execution at a later point. A user typically employs this facility via an interactive interface supplied jointly by the system's terminal driver and Bash.

The shell associates a job with each pipeline. It keeps a table of currently executing jobs, which may be listed with the jobs command. When Bash starts a job asynchronously, it prints a line that looks like:

     [1] 25647

indicating that this job is job number 1 and that the process id of the last process in the pipeline associated with this job is 25647. All of the processes in a single pipeline are members of the same job. Bash uses the job abstraction as the basis for job control.

To facilitate the implementation of the user interface to job control, the operating system maintains the notion of a current terminal process group id. Members of this process group (processes whose process group id is equal to the current terminal process group id) receive keyboard-generated signals such as SIGINT. These processes are said to be in the foreground. Background processes are those whose process group id differs from the terminal's; such processes are immune to keyboard-generated signals. Only foreground processes are allowed to read from or write to the terminal. Background processes which attempt to read from (write to) the terminal are sent a SIGTTIN (SIGTTOU) signal by the terminal driver, which, unless caught, suspends the process.

If the operating system on which Bash is running supports job control, Bash contains facilities to use it. Typing the suspend character (typically ‘^Z’, Control-Z) while a process is running causes that process to be stopped and returns control to Bash. Typing the delayed suspend character (typically ‘^Y’, Control-Y) causes the process to be stopped when it attempts to read input from the terminal, and control to be returned to Bash. The user then manipulates the state of this job, using the bg command to continue it in the background, the fg command to continue it in the foreground, or the kill command to kill it. A ‘^Z’ takes effect immediately, and has the additional side effect of causing pending output and typeahead to be discarded.

There are a number of ways to refer to a job in the shell. The character ‘%’ introduces a job specification (jobspec).

Job number n may be referred to as ‘%n’. The symbols ‘%%’ and ‘%+’ refer to the shell's notion of the current job, which is the last job stopped while it was in the foreground or started in the background. A single ‘%’ (with no accompanying job specification) also refers to the current job. The previous job may be referenced using ‘%-’. If there is only a single job, ‘%+’ and ‘%-’ can both be used to refer to that job. In output pertaining to jobs (e.g., the output of the jobs command), the current job is always flagged with a ‘+’, and the previous job with a ‘-’.

A job may also be referred to using a prefix of the name used to start it, or using a substring that appears in its command line. For example, ‘%ce’ refers to a stopped ce job. Using ‘%?ce’, on the other hand, refers to any job containing the string ‘ce’ in its command line. If the prefix or substring matches more than one job, Bash reports an error.

Simply naming a job can be used to bring it into the foreground: ‘%1’ is a synonym for ‘fg %1’, bringing job 1 from the background into the foreground. Similarly, ‘%1 &’ resumes job 1 in the background, equivalent to ‘bg %1’

The shell learns immediately whenever a job changes state. Normally, Bash waits until it is about to print a prompt before reporting changes in a job's status so as to not interrupt any other output. If the -b option to the set builtin is enabled, Bash reports such changes immediately (see The Set Builtin). Any trap on SIGCHLD is executed for each child process that exits.

If an attempt to exit Bash is made while jobs are stopped, (or running, if the checkjobs option is enabled – see The Shopt Builtin), the shell prints a warning message, and if the checkjobs option is enabled, lists the jobs and their statuses. The jobs command may then be used to inspect their status. If a second attempt to exit is made without an intervening command, Bash does not print another warning, and any stopped jobs are terminated. 

=== Job Control Builtins ===

bg

              bg [jobspec ...]

    Resume each suspended job jobspec in the background, as if it had been started with ‘&’. If jobspec is not supplied, the current job is used. The return status is zero unless it is run when job control is not enabled, or, when run with job control enabled, any jobspec was not found or specifies a job that was started without job control.
fg

              fg [jobspec]

    Resume the job jobspec in the foreground and make it the current job. If jobspec is not supplied, the current job is used. The return status is that of the command placed into the foreground, or non-zero if run when job control is disabled or, when run with job control enabled, jobspec does not specify a valid job or jobspec specifies a job that was started without job control.
jobs

              jobs [-lnprs] [jobspec]
              jobs -x command [arguments]

    The first form lists the active jobs. The options have the following meanings:

    -l
        List process ids in addition to the normal information.
    -n
        Display information only about jobs that have changed status since the user was last notified of their status.
    -p
        List only the process id of the job's process group leader.
    -r
        Restrict output to running jobs.
    -s
        Restrict output to stopped jobs. 

    If jobspec is given, output is restricted to information about that job. If jobspec is not supplied, the status of all jobs is listed.

    If the -x option is supplied, jobs replaces any jobspec found in command or arguments with the corresponding process group id, and executes command, passing it arguments, returning its exit status.
kill

              kill [-s sigspec] [-n signum] [-sigspec] jobspec or pid
              kill -l [exit_status]

    Send a signal specified by sigspec or signum to the process named by job specification jobspec or process id pid. sigspec is either a case-insensitive signal name such as SIGINT (with or without the SIG prefix) or a signal number; signum is a signal number. If sigspec and signum are not present, SIGTERM is used. The -l option lists the signal names. If any arguments are supplied when -l is given, the names of the signals corresponding to the arguments are listed, and the return status is zero. exit_status is a number specifying a signal number or the exit status of a process terminated by a signal. The return status is zero if at least one signal was successfully sent, or non-zero if an error occurs or an invalid option is encountered.
wait

              wait [jobspec or pid ...]

    Wait until the child process specified by each process id pid or job specification jobspec exits and return the exit status of the last command waited for. If a job spec is given, all processes in the job are waited for. If no arguments are given, all currently active child processes are waited for, and the return status is zero. If neither jobspec nor pid specifies an active child process of the shell, the return status is 127.
disown

              disown [-ar] [-h] [jobspec ...]

    Without options, each jobspec is removed from the table of active jobs. If the -h option is given, the job is not removed from the table, but is marked so that SIGHUP is not sent to the job if the shell receives a SIGHUP. If jobspec is not present, and neither the -a nor -r option is supplied, the current job is used. If no jobspec is supplied, the -a option means to remove or mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.
suspend

              suspend [-f]

    Suspend the execution of this shell until it receives a SIGCONT signal. A login shell cannot be suspended; the -f option can be used to override this and force the suspension. 

When job control is not active, the kill and wait builtins do not accept jobspec arguments. They must be supplied process ids. 


=== Job Control Variables ===

auto_resume
    This variable controls how the shell interacts with the user and job control. If this variable exists then single word simple commands without redirections are treated as candidates for resumption of an existing job. There is no ambiguity allowed; if there is more than one job beginning with the string typed, then the most recently accessed job will be selected. The name of a stopped job, in this context, is the command line used to start it. If this variable is set to the value ‘exact’, the string supplied must match the name of a stopped job exactly; if set to ‘substring’, the string supplied needs to match a substring of the name of a stopped job. The ‘substring’ value provides functionality analogous to the ‘%?’ job id (see Job Control Basics). If set to any other value, the supplied string must be a prefix of a stopped job's name; this provides functionality analogous to the ‘%’ job id. 

== Command Line Editing ==

This chapter describes the basic features of the gnu command line editing interface. Command line editing is provided by the Readline library, which is used by several different programs, including Bash. Command line editing is enabled by default when using an interactive shell, unless the --noediting option is supplied at shell invocation. Line editing is also used when using the -e option to the read builtin command (see Bash Builtins). By default, the line editing commands are similar to those of emacs. A vi-style line editing interface is also available. Line editing can be enabled at any time using the -o emacs or -o vi options to the set builtin command (see The Set Builtin), or disabled using the +o emacs or +o vi options to set.

    * Introduction and Notation: Notation used in this text.
    * Readline Interaction: The minimum set of commands for editing a line.
    * Readline Init File: Customizing Readline from a user's view.
    * Bindable Readline Commands: A description of most of the Readline commands available for binding
    * Readline vi Mode: A short description of how to make Readline behave like the vi editor.
    * Programmable Completion: How to specify the possible completions for a specific command.
    * Programmable Completion Builtins: Builtin commands to specify how to complete arguments for a particular command. 


== Compression tools ==
=== Anti Virus=== 
=== SPAM Filters ===
=== File Management tools ===
=== Archiving===
=== Backups===
=== Time snapshots of disk===
=== Disk Management tools ===